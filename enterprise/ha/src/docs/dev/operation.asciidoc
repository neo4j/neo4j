[[ha-how]]
= How Neo4j HA operates

A Neo4j HA cluster operates cooperatively -- each database instance contains the logic needed in order to coordinate with the other members of the cluster.
On startup a Neo4j HA database instance will try to connect to an existing cluster specified by configuration.
If the cluster exists, the instance will join it as a slave.
Otherwise the cluster will be created and the instance will become its master.

When performing a write transaction on a slave each write operation will be synchronized with the master (locks will be acquired on both master and slave).
When the transaction commits it will first be committed on the master and then, if successful, on the slave.
To ensure consistency, a slave has to be up to date with the master before performing a write operation.
This is built into the communication protocol between the slave and master, so that updates will be applied to a slave communicating with its master automatically.

Write transactions performed directly through the master will execute in the same way as running in normal non-HA mode.
On success the transaction will be pushed out to a configurable number of slaves (default one slave).
This is done optimistically meaning if the push fails the transaction will still be successful.
It's also possible to configure push factor to 0 for higher write performance when writing directly through the master, although increasing the risk of losing any transaction not yet pulled by another slave if the master goes down.   

Slaves can also be configured to pull updates asynchronously by setting the <<config_ha.pull_interval>> option.

Whenever a Neo4j database becomes unavailable, by means of for example hardware failure or network outages, the other database instances in the cluster will detect that and mark it as temporarily failed. 
A database instance that becomes available after being unavailable will automatically catch up with the cluster.
If the master goes down another (best suited) member will be elected and have its role switched from slave to master after a quorum has been reached within the cluster.
When the new master has performed its role switch it will broadcast its availability to all the other members of the cluster.
Normally a new master is elected and started within just a few seconds and during this time no writes can take place (the writes will block or in rare cases throw an exception).
The only time this is not true is when an old master had changes that did not get replicated to any other member before becoming unavailable.
If the new master is elected and performs changes before the old master recovers, there will be two "branches" of the database after the point where the old master became unavailable.
The old master will move away its database (its "branch") and download a full copy from the new master, to become available as a slave in the cluster.

All this can be summarized as:

* Write transactions can be performed on any database instance in a cluster.
* Neo4j HA is fault tolerant and can continue to operate from any number of machines down to a single machine.
* Slaves will be automatically synchronized with the master on write operations.
* If the master fails a new master will be elected automatically.
* The cluster automatically handles instances becoming unavailable (for example due to network issues), and also makes sure to accept them as members in the cluster when they are available again.
* Transactions are atomic, consistent and durable but eventually propagated out to other slaves.
* Updates to slaves are eventually consistent by nature but can be configured to be pushed optimistically from master during commit.
* If the master goes down any running write transaction will be rolled back and new transactions will block or fail until a new master has become available.
* Reads are highly available and the ability to handle read load scales with more database instances in the cluster.
