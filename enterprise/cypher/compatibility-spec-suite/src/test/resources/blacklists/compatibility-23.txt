// not returning longs
Aggregates inside normal functions
Aggregation of named paths
Aggregation with `min()`
Get node degree via length of pattern expression
Get node degree via length of pattern expression that specifies a relationship type
Return a var length path of length zero
Remove multiple node properties
Remove multiple relationship properties
Absolute function
Return collection size
Setting and returning the size of a list property
Arithmetic expressions inside aggregation
Concatenating and returning the size of literal lists

// missing toInteger()
Number-typed integer comparison
Number-typed float comparison
Any-typed string comparison
Use collection lookup based on parameters when there is rhs type information
SKIP with an expression that does not depend on variables
LIMIT with an expression that does not depend on variables
`toInteger()`
`toInteger()` on float
`toInteger()` returning null on non-numerical string
`toInteger()` handling mixed number types
`toInteger()` handling Any type
`toInteger()` on a list of strings
`toInteger()` failing on invalid arguments
`toInteger()` on a complex-typed expression

// missing properties()
`properties()` on a node
`properties()` on a relationship
`properties()` on a map
`properties()` failing on an integer literal
`properties()` failing on a string literal
`properties()` failing on a list of booleans
`properties()` on null

// missing toBoolean()
`toBoolean()` on valid literal string
`toBoolean()` on booleans
`toBoolean()` on variables with valid string values
`toBoolean()` on invalid strings
`toBoolean()` on invalid types

// any-type
`type()` handling Any type
`type()` failing on invalid arguments
`labels()` should accept type Any
Handling property access on the Any type
Failing when performing property access on a non-map 1
`toFloat()` handling Any type
`toFloat()` failing on invalid arguments
`toString()` should work on Any type
`toString()` failing on invalid arguments
`max()` should aggregate strings
`min()` should aggregate strings
Handling non-string operands for STARTS WITH
Handling non-string operands for CONTAINS
Handling non-string operands for ENDS WITH

// other
`percentileCont()` failing on bad arguments
`percentileDisc()` failing on bad arguments
`percentileDisc()` failing in more involved query
Fail when adding new label predicate on a node that is already bound 5
Fail when imposing new predicates on a variable that is already bound
Ignore null when setting properties using an appending map
Ignore null when setting properties using an overriding map
Ignore null when setting label
Ignore null when removing label
Pattern expression inside list comprehension
Fail when returning properties of deleted nodes
Fail when returning labels of deleted nodes
Fail when returning properties of deleted relationships
Fail when returning type of deleted relationships
`toFloat()` on mixed number types
`toString()` handling boolean properties
`toString()` handling inlined boolean
`toString()` handling boolean literal
IN should work with nested list subscripting
IN should work with nested literal list subscripting
IN should work with list slices
IN should work with literal list slices

// new parameter syntax $
Delete node from a list
Delete relationship from a list
Use dynamic property lookup based on parameters when there is no type information
Use dynamic property lookup based on parameters when there is lhs type information
Use dynamic property lookup based on parameters when there is rhs type information
Use collection lookup based on parameters when there is no type information
Use collection lookup based on parameters when there is lhs type information
Fail at runtime when attempting to index with an Int into a Map
Fail at runtime when trying to index into a map with a non-string
Fail at runtime when attempting to index with a String into a Collection
Fail at runtime when trying to index into a list with a list
Fail at runtime when trying to index something which is not a map or collection
`percentileDisc()`
`percentileCont()`
Using `keys()` on a parameter map
Use params in pattern matching predicates
Matching with many predicates and larger pattern
ORDER BY with negative parameter for LIMIT should not generate errors
Start the result from the second row by param
Get rows in the middle by param
Using null in AND
Using null in OR
Using null in XOR
Using null in IN
Creating nodes from an unwound parameter list
Unwind with merge

// unsupported pattern comprehensions
Pattern comprehension and ORDER BY
Returning a pattern comprehension
Returning a pattern comprehension with label predicate
Returning a pattern comprehension with bound nodes
Using a pattern comprehension in a WITH
Using a variable-length pattern comprehension in a WITH
Using pattern comprehension in RETURN
Aggregating on pattern comprehension
Using pattern comprehension to test existence
Pattern comprehension inside list comprehension
Get node degree via size of pattern comprehension
Get node degree via size of pattern comprehension that specifies a relationship type
Get node degree via size of pattern comprehension that specifies multiple relationship types
Introducing new node variable in pattern comprehension
Introducing new relationship variable in pattern comprehension

// throwing exceptions when comparing
Comparing strings and integers using > in an AND'd predicate
Comparing strings and integers using > in a OR'd predicate
Comparing across types yields null, except numbers
