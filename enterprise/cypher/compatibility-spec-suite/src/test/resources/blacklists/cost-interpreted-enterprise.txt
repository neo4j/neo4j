Combining string operators' was blacklisted, but succeeded
DISTINCT on nullable values
Directed match of a simple relationship, count
Directed match on self-relationship graph, count
Get rows in the middle by param
Get rows in the middle

handling long chanins of operators
Handle ORDER BY with LIMIT 1
Handle projections with ORDER BY - GH#4937
Keeping used expression 1
LIMIT 0 should return an empty result
Limit to two hits
Limiting amount of rows when there are fewer left than the LIMIT argument
Matching and returning ordered results, with LIMIT
ORDER BY DESC should order booleans in the expected order
ORDER BY DESC should order floats in the expected order
ORDER BY DESC should order ints in the expected order
ORDER BY DESC should order strings in the expected order
ORDER BY DESC should return results in descending order
ORDER BY a DISTINCT column
ORDER BY and LIMIT can be used
ORDER BY should order booleans in the expected order
ORDER BY should order floats in the expected order
ORDER BY should order ints in the expected order
ORDER BY should order strings in the expected order
ORDER BY should return results in ascending order
ORDER BY with LIMIT 0 should not generate errors
ORDER BY with negative parameter for LIMIT should not generate errors
Projecting nodes and relationships
Renaming columns before ORDER BY should return results in ascending order
Returned columns do not change from using ORDER BY
Returning all variables with ordering
Simple counting of nodes
Start the result from the second row by param
Start the result from the second row
Support column renaming for aggregates as well
Support column renaming
Support ordering by a property after being distinct-ified
Support sort and distinct
Use multiple MATCH clauses to do a Cartesian product
Using aliased DISTINCT expression in ORDER BY
Returning bound nodes that are not part of the pattern
Comparing nodes for equality
Matching disconnected patterns
No dependencies between the query parts

Nodes are not created when aliases are applied to variable names
Only a single node is created when an alias is applied to a variable name
Support multiple divisions in aggregate function
Sort on aggregate function and normal property
Handle aggregation on functions
Distinct on unbound node
Aggregates in aggregates
Aggregates with arithmetics
Aggregates ordered by arithmetics
Aggregation of named paths
Aggregation with `min()`
Handle subexpression in aggregation also occurring as standalone expression with nested aggregation in a literal map
Projection during aggregation in WITH before MERGE and after WITH with predicate
No overflow during summation
Keeping used expression 2
Keeping used expression 3
Handling numerical ranges 1
Handling numerical ranges 2
Handling numerical ranges 3
Handling numerical ranges 4
Handling string ranges 1
Handling string ranges 2
Handling string ranges 3
Handling string ranges 4
Handling empty range
Comparing nodes to nodes
Comparing relationships to relationships
Fail at runtime when attempting to index with an Int into a Map
Fail at runtime when trying to index into a map with a non-string
Fail at runtime when attempting to index with a String into a Collection
Fail at runtime when trying to index into a list with a list
Fail at runtime when trying to index something which is not a map or collection
Functions should return null if they get path containing unbound
`exists()` with literal maps
IS NOT NULL with literal maps
`percentileCont()` failing on bad arguments
`percentileDisc()` failing on bad arguments
`percentileDisc()` failing in more involved query
`type()` failing on invalid arguments
`labels()` in return clauses
Find friends of others
Should only join when matching
Using `keys()` on a single node, non-empty result
Using `keys()` on multiple nodes, non-empty result
Using `keys()` on a single node, empty result
Using `keys()` on an optionally matched node
Using `keys()` on a relationship, non-empty result
Using `keys()` on a relationship, empty result
Using `keys()` on an optionally matched relationship
Adding a single label
Ignore space before colon
Adding multiple labels
Ignoring intermediate whitespace 1
Ignoring intermediate whitespace 2
Removing a label
Removing a non-existent label
Returning a list comprehension
Using a list comprehension in a WITH
Using a list comprehension in a WHERE
Path query should return results in written order
Longer path query should return results in written order
Return a simple path
Return a three node path
Do not return anything because path length does not match
Pass the path length test
Return relationships by fetching them from the path - starting from the end
Return relationships by fetching them from the path
Return a var length path
Return a var length path of length zero
Return a named var length path of length zero
Do not fail when evaluating predicates with illegal operations if the AND'ed predicate evaluates to false
Fail when comparing strings and integers using > in an AND'd predicate
Fail when comparing strings and integers using > in a OR'd predicate
Aggregation with named paths
Variable length relationship without lower bound
Variable length relationship without bounds
Optionally matching named paths
Optionally matching named paths with single and variable length patterns
Optionally matching named paths with variable length patterns
Excluding connected nodes
Variable length relationship in OPTIONAL MATCH
ORDER BY with LIMIT
Handling direction of named paths
`collect()` filtering nulls
Zero-length named path
Variable-length named path
Matching using a relationship that is already bound
Matching using a relationship that is already bound, in conjunction with aggregation
Matching using a relationship that is already bound, in conjunction with aggregation and ORDER BY
Matching with LIMIT and optionally matching using a relationship that is already bound
Matching with LIMIT and optionally matching using a relationship and node that are both already bound
Matching with LIMIT, then matching again using a relationship and node that are both already bound along with an additional predicate
Matching with LIMIT and predicates, then matching again using a relationship and node that are both already bound along with a duplicate predicate
Matching twice with conflicting relationship types on same relationship
Matching twice with duplicate relationship types on same relationship
Matching relationships into a list and matching variable length using the list
Matching relationships into a list and matching variable length using the list, with bound nodes
Matching relationships into a list and matching variable length using the list, with bound nodes, wrong direction
Matching and optionally matching with bound nodes in reverse direction
Matching and optionally matching with unbound nodes and equality predicate in reverse direction
Fail when using property access on primitive type
Counting an empty graph
Variable length pattern checking labels on endnodes
Undirected named path
Named path with WITH
Named path with alternating directed/undirected relationships
Named path with multiple alternating directed/undirected relationships
Named path with undirected fixed variable length pattern
Variable length patterns and nulls
Respecting direction when matching existing path
Respecting direction when matching non-existent path
Respecting direction when matching non-existent path with multiple directions
Matching path with both directions should respect other directions
Matching path with multiple bidirectional relationships
Counting rows after MATCH, MERGE, OPTIONAL MATCH
Failing on merging relationship with null property
Failing on merging node with null property
Failing when setting a list of maps as a property
Ignore null when setting property
Ignore null when removing property
Ignore null when setting properties using an appending map
Ignore null when setting properties using an overriding map
Ignore null when setting label
Ignore null when removing label
Ignore null when deleting node
Ignore null when deleting relationship
Satisfies the open world assumption, relationships between same nodes
Satisfies the open world assumption, single relationship
Satisfies the open world assumption, relationships between different nodes
MATCH after OPTIONAL MATCH
Named paths in optional matches
Named paths inside optional matches with node predicates
Variable length optional relationships
Variable length optional relationships with length predicates
Variable length optional relationships with bound nodes
Variable length optional relationships with bound nodes, no matches
Longer pattern with bound nodes
Longer pattern with bound nodes without matches
OPTIONAL MATCH and `collect()`
ORDER BY of a column introduced in RETURN should return salient results in ascending order
Pattern comprehension and ORDER BY
Returning a pattern comprehension
Returning a pattern comprehension with label predicate
Returning a pattern comprehension with bound nodes
Using a pattern comprehension in a WITH
Using a variable-length pattern comprehension in a WITH
Using pattern comprehension in RETURN
Aggregating on pattern comprehension
Using pattern comprehension to test existence
Pattern comprehension inside list comprehension
Get node degree via size of pattern comprehension
Get node degree via size of pattern comprehension that specifies a relationship type
Get node degree via size of pattern comprehension that specifies multiple relationship types
Introducing new node variable in pattern comprehension
Introducing new relationship variable in pattern comprehension
Should ignore nulls
Remove a single label
Remove multiple labels
Remove a single node property
Remove multiple node properties
Remove a single relationship property
Remove a single relationship property
Remove multiple relationship properties
Remove a missing property should be a valid operation
Sort on aggregated function
Count star should count everything in scope
Fail when returning properties of deleted nodes
Fail when returning labels of deleted nodes
Fail when returning properties of deleted relationships
Do not fail when returning type of deleted relationships
Fail when sorting on variable removed by DISTINCT
Fail when ordering nodes
Ordering with aggregation
Return all variables
Setting and returning the size of a list property
Setting and returning the size of a list property
Arithmetic expressions inside aggregation
Concatenating and returning the size of literal lists
Concatenating and returning the size of literal lists
Multiple aliasing and backreferencing
Reusing variable names
Handling DISTINCT with lists in maps
Failing when performing property access on a non-map 1
Failing when performing property access on a non-map 2
Bad arguments for `range()`
LIMIT with an expression that does not depend on variables
Using `rand()` in aggregations
Handling triadic friend of a friend that is not a friend
Handling triadic friend of a friend that is not a friend with different relationship type
Handling triadic friend of a friend that is not a friend with superset of relationship type
Handling triadic friend of a friend that is not a friend with implicit subset of relationship type
Handling triadic friend of a friend that is not a friend with explicit subset of relationship type
Handling triadic friend of a friend that is not a friend with same labels
Handling triadic friend of a friend that is not a friend with different labels
Handling triadic friend of a friend that is not a friend with implicit subset of labels
Handling triadic friend of a friend that is not a friend with implicit superset of labels
Handling triadic friend of a friend that is a friend
Handling triadic friend of a friend that is a friend with different relationship type
Handling triadic friend of a friend that is a friend with superset of relationship type
Handling triadic friend of a friend that is a friend with implicit subset of relationship type
Handling triadic friend of a friend that is a friend with explicit subset of relationship type
Handling triadic friend of a friend that is a friend with same labels
Handling triadic friend of a friend that is a friend with different labels
Handling triadic friend of a friend that is a friend with implicit subset of labels
Handling triadic friend of a friend that is a friend with implicit superset of labels
`toBoolean()` on invalid types
`toInteger()`
`toInteger()` handling mixed number types
`toInteger()` handling Any type
`toInteger()` on a list of strings
`toInteger()` failing on invalid arguments
`toFloat()`
`toFloat()` on mixed number types
`toFloat()` handling Any type
`toFloat()` on a list of strings
`toFloat()` failing on invalid arguments
`toString()`
`toString()` should work on Any type
`toString()` on a list of integers
`toString()` failing on invalid arguments
Should be able to create text output from union queries
Two elements, both unique, not distinct
Two elements, both unique, distinct
Three elements, two unique, distinct
Three elements, two unique, not distinct
Unwinding a collected expression
Creating nodes from an unwound parameter list
Unwind does not remove variables from scope
Fail when asterisk operator is missing
Fail on negative bound
Handling a variable length relationship and a standard relationship in chain, zero length 1
Handling a variable length relationship and a standard relationship in chain, zero length 2
Handling a variable length relationship and a standard relationship in chain, single length 1
Handling a variable length relationship and a standard relationship in chain, single length 2
Handling a variable length relationship and a standard relationship in chain, longer 1
Handling a variable length relationship and a standard relationship in chain, longer 2
Handling a variable length relationship and a standard relationship in chain, longer 3
Handling mixed relationship patterns and directions 1
Handling mixed relationship patterns and directions 2
Handling mixed relationship patterns 1
Handling mixed relationship patterns 2
Handling relationships that are already bound in variable length paths
Fail when trying to compare strings and numbers
Handle dependencies across WITH
Handle dependencies across WITH with SKIP
ORDER BY on an aggregating key
WHERE on a DISTINCT column
A simple pattern with one bound endpoint
Nested maps
Connected components succeeding WITH
Multiple WITHs using a predicate and aggregation
Fail at compile time when attempting to index with a non-integer into a list
`properties()` failing on an integer literal
`properties()` failing on a string literal
`properties()` failing on a list of booleans
Fail when adding a new label predicate on a node that is already bound 1
Fail when adding new label predicate on a node that is already bound 2
Fail when adding new label predicate on a node that is already bound 3
Fail when adding new label predicate on a node that is already bound 4
Fail when adding new label predicate on a node that is already bound 5
Failing on incorrect unicode literal
Failing on aggregation in WHERE
Failing when not aliasing expressions in WITH
Failing when using undefined variable in pattern
Failing when using undefined variable in SET
Failing when using undefined variable in DELETE
Failing when using a variable that is already bound in CREATE

// Updating queries
Fail when imposing new predicates on a variable that is already bound
Combine MATCH, WITH and CREATE
Create a relationship with the correct direction
Nodes are not created when aliases are applied to variable names multiple times
Only a single node is created when an alias is applied to a variable name multiple times
A bound node should be recognized after projection with WITH + MERGE node
A bound node should be recognized after projection with WITH + MERGE pattern
Delete nodes
Detach delete node
Delete relationships
Deleting connected nodes
Detach deleting connected nodes and relationships
Detach deleting paths
Undirected expand followed by delete and count
Undirected variable length expand followed by delete and count
Create and delete in same query
Delete optionally matched relationship
Delete on null node
Detach delete on null node
Delete on null path
Delete node from a list
Delete node from a list
Delete relationship from a list
Delete nodes from a map
Delete relationships from a map
Detach delete nodes from nested map/list
Delete relationships from nested map/list
Delete paths from nested map/list
Delete relationship with bidirectional matching
Updating one property with ON CREATE
Null-setting one property with ON CREATE
Copying properties from literal map with ON CREATE
Copying properties from literal map with ON MATCH
Copying properties from node with ON CREATE
Copying properties from node with ON MATCH
Merge node when no nodes exist
Merge node with label
Merge node with label add label on create
Merge node with label add property on create
Merge node with label when it exists
Merge node should create when it doesn't match, properties
Merge node should create when it doesn't match, properties and label
Merge node with prop and label
Merge node with label add label on match when it exists
Merge node with label add property on update when it exists
Merge node and set property on match
Should work when finding multiple elements
Should handle argument properly
Should handle arguments properly with only write clauses
Should be able to merge using property from match
Should be able to use properties from match in ON CREATE
Should be able to use properties from match in ON MATCH
Should be able to use properties from match in ON MATCH and ON CREATE
Should be able to set labels on match
Should be able to set labels on match and on create
Should support updates while merging
Merge must properly handle multiple labels
Merge followed by multiple creates
Unwind combined with merge
Merges should not be able to match on deleted nodes
ON CREATE on created nodes
Creating a relationship
Matching a relationship
Matching two relationships
Filtering relationships
Creating relationship when all matches filtered out
Matching incoming relationship
Creating relationship with property
Using ON CREATE on a node
Using ON CREATE on a relationship
Using ON MATCH on created node
Using ON MATCH on created relationship
Using ON MATCH on a relationship
Using ON CREATE and ON MATCH
Creating relationship using merged nodes
Mixing MERGE with CREATE
Introduce named paths 1
Introduce named paths 2
Use outgoing direction when unspecified
Match outgoing relationship when direction unspecified
Match both incoming and outgoing relationships when direction unspecified
Using list properties via variable
Matching using list property
Using bound variables from other updating clause
UNWIND with multiple merges
Do not match on deleted entities
Do not match on deleted relationships
Aliasing of existing nodes 1
Aliasing of existing nodes 2
Double aliasing of existing nodes 1
Double aliasing of existing nodes 2
Setting a node property to null removes the existing property
Setting a relationship property to null removes the existing property
Set a property
Set a property to an expression
Set a property by selecting the node using a simple expression
Set a property by selecting the relationship using a simple expression
Setting a property to null removes the property
Add a label to a node
Adding a list property
Concatenate elements onto a list property
Concatenate elements in reverse onto a list property
Overwrite values when using +=
Retain old values when using +=
Explicit null values in a map remove old values
Non-existent values in a property map are removed with SET =
Unwind with merge
Fail when trying to create using an undirected relationship pattern
Returning nested expressions based on list property

Returning label predicate on null node
`type()` on mixed null and non-null relationships
`type()` on mixed null and non-null relationships
`type()` on null relationship
Respect predicates on the OPTIONAL MATCH
Optionally matching self-loops
Optionally matching self-loops without matches
OPTIONAL MATCH with labels on the optional end node
OPTIONAL MATCH and bound nodes
MATCH and OPTIONAL MATCH on same pattern
Handling correlated optional matches; first does not match implies second does not match
Do not fail when predicates on optionally matched and missed nodes are invalid

Many CREATE clauses

Comparing across types yields null, except numbers

`labels()` failing on invalid arguments
Direction of traversed relationship is not significant for path equality, simple
In-query call to procedure that takes no arguments
Calling the same procedure twice using the same outputs in each call
In-query call to VOID procedure that takes no arguments
In-query call to VOID procedure does not consume rows
In-query call to procedure that takes no arguments and yields no results
In-query call to procedure with explicit arguments
In-query call to procedure with explicit arguments that drops all result fields
In-query call to procedure with argument of type NUMBER accepts value of type INTEGER
In-query call to procedure with argument of type NUMBER accepts value of type FLOAT
In-query call to procedure with argument of type FLOAT accepts value of type INTEGER
Standalone call to procedure with argument of type INTEGER accepts value of type FLOAT
In-query call to procedure with argument of type INTEGER accepts value of type FLOAT
In-query call to procedure with null argument
