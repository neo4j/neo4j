Support multiple divisions in aggregate function
Aggregates inside normal functions
Handle aggregates inside non-aggregate expressions
Count nodes
Sort on aggregate function and normal property
Aggregate on property
Sum non-null values
Handle aggregation on functions
Distinct on unbound node
Collect distinct nulls
Collect distinct values mixed with nulls
Aggregate on list values
Aggregates in aggregates
Aggregates with arithmetics
Aggregates ordered by arithmetics
Multiple aggregates on same variable
Aggregation of named paths
Aggregation with `min()`
Handle subexpression in aggregation also occurring as standalone expression with nested aggregation in a literal map
Projection during aggregation in WITH before MERGE and after WITH with predicate
No overflow during summation
`max()` should aggregate strings
`min()` should aggregate strings
Keeping used expression 2
Keeping used expression 3
Keeping used expression 4
Handling numerical ranges 1
Handling numerical ranges 2
Handling numerical ranges 3
Handling numerical ranges 4
Handling string ranges 1
Handling string ranges 2
Handling string ranges 3
Handling string ranges 4
Handling empty range
Handling long chains of operators
Number-typed integer comparison
Number-typed float comparison
Any-typed string comparison
Comparing nodes to nodes
Comparing relationships to relationships
IN should work with nested list subscripting
IN should work with nested literal list subscripting
IN should work with list slices
IN should work with literal list slices
Execute n[0]
Execute n['name'] in read queries
Execute n['name'] in update queries
Use dynamic property lookup based on parameters when there is no type information
Use dynamic property lookup based on parameters when there is lhs type information
Use dynamic property lookup based on parameters when there is rhs type information
Use collection lookup based on parameters when there is no type information
Use collection lookup based on parameters when there is lhs type information
Use collection lookup based on parameters when there is rhs type information
Fail at runtime when attempting to index with an Int into a Map
Fail at runtime when trying to index into a map with a non-string
Fail at runtime when attempting to index with a String into a Collection
Fail at runtime when trying to index into a list with a list
Fail at runtime when trying to index something which is not a map or collection
Run coalesce
Functions should return null if they get path containing unbound
`split()`
`properties()` on a node
`properties()` on a relationship
`properties()` on a map
`properties()` on null
`reverse()`
`exists()` with dynamic property lookup
`exists()` with literal maps
IS NOT NULL with literal maps
`percentileDisc()`
`percentileCont()`
`percentileCont()` failing on bad arguments
`percentileDisc()` failing on bad arguments
`percentileDisc()` failing in more involved query
`type()` handling Any type
`type()` failing on invalid arguments
`labels()` should accept type Any
`exists()` is case insensitive
Find friends of others
Should only join when matching
Using `keys()` on a single node, non-empty result
Using `keys()` on multiple nodes, non-empty result
Using `keys()` on a single node, empty result
Using `keys()` on an optionally matched node
Using `keys()` on a relationship, non-empty result
Using `keys()` on a relationship, empty result
Using `keys()` on an optionally matched relationship
Using `keys()` on a literal map
Using `keys()` on a parameter map
Adding a single label
Ignore space before colon
Adding multiple labels
Ignoring intermediate whitespace 1
Ignoring intermediate whitespace 2
Creating node without label
Creating node with two labels
Ignore space when creating node with labels
Create node with label in pattern
Using `labels()` in return clauses
Removing a label
Removing a non-existent label
Returning a list comprehension
Using a list comprehension in a WITH
Using a list comprehension in a WHERE
Path query should return results in written order
Longer path query should return results in written order
Walk alternative relationships
Handle OR in the WHERE clause
Return a simple path
Return a three node path
Do not return anything because path length does not match
Pass the path length test
Return relationships by fetching them from the path - starting from the end
Return relationships by fetching them from the path
Return relationships by collecting them as a list - wrong way
Return relationships by collecting them as a list - undirected
Return relationships by collecting them as a list
Return a var length path
Return a var length path of length zero
Return a named var length path of length zero
Do not fail when evaluating predicates with illegal operations if the AND'ed predicate evaluates to false
Do not fail when evaluating predicates with illegal operations if the OR'd predicate evaluates to true
Fail when comparing strings and integers using > in an AND'd predicate
Fail when comparing strings and integers using > in a OR'd predicate
Aggregation with named paths
Zero-length variable length pattern in the middle of the pattern
Simple variable length pattern
Variable length relationship without lower bound
Variable length relationship without bounds
MATCH with OPTIONAL MATCH in longer pattern
Optionally matching named paths
Optionally matching named paths with single and variable length patterns
Optionally matching named paths with variable length patterns
Matching variable length patterns from a bound node
Excluding connected nodes
Variable length relationship in OPTIONAL MATCH
ORDER BY with LIMIT
Handling direction of named paths
Simple OPTIONAL MATCH on empty graph
`collect()` filtering nulls
Handling fixed-length variable length pattern
Matching from null nodes should return no results owing to finding no matches
Matching from null nodes should return no results owing to matches being filtered out
Optionally matching from null nodes should return null
OPTIONAL MATCH returns null
Zero-length named path
Variable-length named path
Matching using a relationship that is already bound
Matching using a relationship that is already bound, in conjunction with aggregation
Matching using a relationship that is already bound, in conjunction with aggregation and ORDER BY
Matching with LIMIT and optionally matching using a relationship that is already bound
Matching with LIMIT and optionally matching using a relationship and node that are both already bound
Matching with LIMIT, then matching again using a relationship and node that are both already bound along with an additional predicate
Matching with LIMIT and predicates, then matching again using a relationship and node that are both already bound along with a duplicate predicate
Matching twice with conflicting relationship types on same relationship
Matching twice with duplicate relationship types on same relationship
Matching relationships into a list and matching variable length using the list
Matching relationships into a list and matching variable length using the list, with bound nodes
Matching relationships into a list and matching variable length using the list, with bound nodes, wrong direction
Matching and optionally matching with bound nodes in reverse direction
Matching and optionally matching with unbound nodes and equality predicate in reverse direction
Fail when using property access on primitive type
Counting an empty graph
Matching variable length pattern with property predicate
Variable length pattern checking labels on endnodes
Variable length pattern with label predicate on both sides
Undirected named path
Named path with WITH
Named path with alternating directed/undirected relationships
Named path with multiple alternating directed/undirected relationships
Named path with undirected fixed variable length pattern
Variable length relationship variables are lists of relationships
Variable length patterns and nulls
Respecting direction when matching existing path
Respecting direction when matching non-existent path
Respecting direction when matching non-existent path with multiple directions
Matching path with both directions should respect other directions
Matching path with multiple bidirectional relationships
Matching longer variable length paths
Counting rows after MATCH, MERGE, OPTIONAL MATCH
Failing on merging relationship with null property
Failing on merging node with null property
Failing when setting a list of maps as a property
Ignore null when setting property
Ignore null when removing property
Ignore null when setting properties using an appending map
Ignore null when setting properties using an overriding map
Ignore null when setting label
Ignore null when removing label
Ignore null when deleting node
Ignore null when deleting relationship
Satisfies the open world assumption, relationships between same nodes
Satisfies the open world assumption, single relationship
Satisfies the open world assumption, relationships between different nodes
Return null when no matches due to inline label predicate
Return null when no matches due to label predicate in WHERE
MATCH after OPTIONAL MATCH
WITH after OPTIONAL MATCH
Named paths in optional matches
Named paths inside optional matches with node predicates
Variable length optional relationships
Variable length optional relationships with length predicates
Variable length optional relationships with bound nodes
Variable length optional relationships with bound nodes, no matches
Longer pattern with bound nodes
Longer pattern with bound nodes without matches
Handling optional matches between optionally matched entities
Handling optional matches between nulls
OPTIONAL MATCH and `collect()`
ORDER BY of a column introduced in RETURN should return salient results in ascending order
Pattern comprehension and ORDER BY
Returning a pattern comprehension
Returning a pattern comprehension with label predicate
Returning a pattern comprehension with bound nodes
Using a pattern comprehension in a WITH
Using a variable-length pattern comprehension in a WITH
Using pattern comprehension in RETURN
Aggregating on pattern comprehension
Using pattern comprehension to test existence
Pattern comprehension inside list comprehension
Get node degree via size of pattern comprehension
Get node degree via size of pattern comprehension that specifies a relationship type
Get node degree via size of pattern comprehension that specifies multiple relationship types
Introducing new node variable in pattern comprehension
Introducing new relationship variable in pattern comprehension
Should ignore nulls
Remove a single label
Remove multiple labels
Remove a single node property
Remove multiple node properties
Remove a single relationship property
Remove multiple relationship properties
Remove a missing property should be a valid operation
Sort on aggregated function
Count star should count everything in scope
Absolute function
Return collection size
Fail when returning properties of deleted nodes
Fail when returning labels of deleted nodes
Fail when returning properties of deleted relationships
Do not fail when returning type of deleted relationships
Fail when sorting on variable removed by DISTINCT
Fail when ordering nodes
Ordering with aggregation
Return all variables
Setting and returning the size of a list property
`sqrt()` returning float values
Arithmetic expressions inside aggregation
Matching and disregarding output, then matching again
Returning an expression
Concatenating and returning the size of literal lists
`substring()` with default second argument
Arithmetic expressions should propagate null values
Indexing into nested literal lists
Multiple aliasing and backreferencing
Aggregating by a list property has a correct definition of equality
Reusing variable names
Handling DISTINCT with lists in maps
Handling property access on the Any type
Failing when performing property access on a non-map 1
Failing when performing property access on a non-map 2
Bad arguments for `range()`
SKIP with an expression that does not depend on variables
LIMIT with an expression that does not depend on variables
Finding exact matches
Finding beginning of string
Finding end of string 1
Finding end of string 2
Finding middle of string
Finding the empty string
Finding when the middle is known
Finding strings starting with whitespace
Finding strings starting with newline
Finding strings ending with newline
Finding strings ending with whitespace
Finding strings containing whitespace
Finding strings containing newline
No string starts with null
No string does not start with null
No string ends with null
No string does not end with null
No string contains null
No string does not contain null
Combining string operators
NOT with CONTAINS
Using `rand()` in aggregations
A literal null IS null
A literal null is not IS NOT null
Using null in AND
Using null in OR
Using null in XOR
Using null in IN
Handling triadic friend of a friend that is not a friend
Handling triadic friend of a friend that is not a friend with different relationship type
Handling triadic friend of a friend that is not a friend with superset of relationship type
Handling triadic friend of a friend that is not a friend with implicit subset of relationship type
Handling triadic friend of a friend that is not a friend with explicit subset of relationship type
Handling triadic friend of a friend that is not a friend with same labels
Handling triadic friend of a friend that is not a friend with different labels
Handling triadic friend of a friend that is not a friend with implicit subset of labels
Handling triadic friend of a friend that is not a friend with implicit superset of labels
Handling triadic friend of a friend that is a friend
Handling triadic friend of a friend that is a friend with different relationship type
Handling triadic friend of a friend that is a friend with superset of relationship type
Handling triadic friend of a friend that is a friend with implicit subset of relationship type
Handling triadic friend of a friend that is a friend with explicit subset of relationship type
Handling triadic friend of a friend that is a friend with same labels
Handling triadic friend of a friend that is a friend with different labels
Handling triadic friend of a friend that is a friend with implicit subset of labels
Handling triadic friend of a friend that is a friend with implicit superset of labels
`toBoolean()` on valid literal string
`toBoolean()` on booleans
`toBoolean()` on variables with valid string values
`toBoolean()` on invalid strings
`toBoolean()` on invalid types
`toInteger()`
`toInteger()` on float
`toInteger()` returning null on non-numerical string
`toInteger()` handling mixed number types
`toInteger()` handling Any type
`toInteger()` on a list of strings
`toInteger()` on a complex-typed expression
`toInteger()` failing on invalid arguments
`toFloat()`
`toFloat()` on mixed number types
`toFloat()` returning null on non-numerical string
`toFloat()` handling Any type
`toFloat()` on a list of strings
`toFloat()` failing on invalid arguments
`toString()`
`toString()` handling boolean properties
`toString()` handling inlined boolean
`toString()` handling boolean literal
`toString()` should work on Any type
`toString()` on a list of integers
`toString()` failing on invalid arguments
`toString()` should accept potentially correct types 1
`toString()` should accept potentially correct types 2
Should be able to create text output from union queries
Two elements, both unique, not distinct
Two elements, both unique, distinct
Three elements, two unique, distinct
Three elements, two unique, not distinct
Unwinding a range
Unwinding a collected unwound expression
Unwinding a collected expression
Creating nodes from an unwound parameter list
Unwind does not remove variables from scope
Handling unbounded variable length match
Handling explicitly unbounded variable length match
Fail when asterisk operator is missing
Handling single bounded variable length match 1
Handling single bounded variable length match 2
Handling single bounded variable length match 3
Handling upper and lower bounded variable length match 1
Handling upper and lower bounded variable length match 2
Handling symmetrically bounded variable length match, bounds are zero
Handling symmetrically bounded variable length match, bounds are one
Handling symmetrically bounded variable length match, bounds are two
Fail on negative bound
Handling upper and lower bounded variable length match, empty interval 1
Handling upper and lower bounded variable length match, empty interval 2
Handling upper bounded variable length match, empty interval
Handling upper bounded variable length match 1
Handling upper bounded variable length match 2
Handling lower bounded variable length match 1
Handling lower bounded variable length match 2
Handling lower bounded variable length match 3
Handling a variable length relationship and a standard relationship in chain, zero length 1
Handling a variable length relationship and a standard relationship in chain, zero length 2
Handling a variable length relationship and a standard relationship in chain, single length 1
Handling a variable length relationship and a standard relationship in chain, single length 2
Handling a variable length relationship and a standard relationship in chain, longer 1
Handling a variable length relationship and a standard relationship in chain, longer 2
Handling a variable length relationship and a standard relationship in chain, longer 3
Handling mixed relationship patterns and directions 1
Handling mixed relationship patterns and directions 2
Handling mixed relationship patterns 1
Handling mixed relationship patterns 2
Handling relationships that are already bound in variable length paths
NOT and false
Fail when trying to compare strings and numbers
Aliasing
Handle dependencies across WITH
Handle dependencies across WITH with SKIP
WHERE after WITH should filter results
WHERE after WITH can filter on top of an aggregation
ORDER BY on an aggregating key
WHERE on a DISTINCT column
A simple pattern with one bound endpoint
Null handling
Nested maps
Connected components succeeding WITH
Single WITH using a predicate and aggregation
Multiple WITHs using a predicate and aggregation
Fail at compile time when attempting to index with a non-integer into a list
`properties()` failing on an integer literal
`properties()` failing on a string literal
`properties()` failing on a list of booleans
Fail when adding a new label predicate on a node that is already bound 1
Fail when adding new label predicate on a node that is already bound 2
Fail when adding new label predicate on a node that is already bound 3
Fail when adding new label predicate on a node that is already bound 4
Fail when adding new label predicate on a node that is already bound 5
Failing on incorrect unicode literal
Failing on aggregation in WHERE
Failing when not aliasing expressions in WITH
Failing when using undefined variable in pattern
Failing when using undefined variable in SET
Failing when using undefined variable in DELETE
Failing when using a variable that is already bound in CREATE

// Updating queries
Fail when imposing new predicates on a variable that is already bound
Creating a node
Creating two nodes
Creating two nodes and a relationship
Creating a node with a label
Creating a node with a property
Create a single node with multiple labels
Combine MATCH and CREATE
Combine MATCH, WITH and CREATE
Newly-created nodes not visible to preceding MATCH
Create a single node with properties
Creating a node with null properties should not return those properties
Creating a relationship with null properties should not return those properties
Create a simple pattern
Create a self loop
Create a self loop using MATCH
Create nodes and relationships
Create a relationship with a property
Create a relationship with the correct direction
Create a relationship and an end node from a matched starting node
Create a single node after a WITH
Create a relationship with a reversed direction
Create a pattern with multiple hops
Create a pattern with multiple hops in the reverse direction
Create a pattern with multiple hops in varying directions
Create a pattern with multiple hops with multiple types and varying directions
Nodes are not created when aliases are applied to variable names
Only a single node is created when an alias is applied to a variable name
Nodes are not created when aliases are applied to variable names multiple times
Only a single node is created when an alias is applied to a variable name multiple times
A bound node should be recognized after projection with WITH + WITH
A bound node should be recognized after projection with WITH + UNWIND
A bound node should be recognized after projection with WITH + MERGE node
A bound node should be recognized after projection with WITH + MERGE pattern
Creating a pattern with multiple hops and changing directions
Delete nodes
Detach delete node
Delete relationships
Deleting connected nodes
Detach deleting connected nodes and relationships
Detach deleting paths
Undirected expand followed by delete and count
Undirected variable length expand followed by delete and count
Create and delete in same query
Delete optionally matched relationship
Delete on null node
Detach delete on null node
Delete on null path
Delete node from a list
Delete relationship from a list
Delete nodes from a map
Delete relationships from a map
Detach delete nodes from nested map/list
Delete relationships from nested map/list
Delete paths from nested map/list
Delete relationship with bidirectional matching
Generate the movie graph correctly
Updating one property with ON CREATE
Null-setting one property with ON CREATE
Copying properties from node with ON CREATE
Copying properties from node with ON MATCH
Copying properties from literal map with ON CREATE
Copying properties from literal map with ON MATCH
Merge node when no nodes exist
Merge node with label
Merge node with label add label on create
Merge node with label add property on create
Merge node with label when it exists
Merge node should create when it doesn't match, properties
Merge node should create when it doesn't match, properties and label
Merge node with prop and label
Merge node with label add label on match when it exists
Merge node with label add property on update when it exists
Merge node and set property on match
Should work when finding multiple elements
Should handle argument properly
Should handle arguments properly with only write clauses
Should be able to merge using property from match
Should be able to use properties from match in ON CREATE
Should be able to use properties from match in ON MATCH
Should be able to use properties from match in ON MATCH and ON CREATE
Should be able to set labels on match
Should be able to set labels on match and on create
Should support updates while merging
Merge must properly handle multiple labels
Merge followed by multiple creates
Unwind combined with merge
Merges should not be able to match on deleted nodes
ON CREATE on created nodes
Creating a relationship
Matching a relationship
Matching two relationships
Filtering relationships
Creating relationship when all matches filtered out
Matching incoming relationship
Creating relationship with property
Using ON CREATE on a node
Using ON CREATE on a relationship
Using ON MATCH on created node
Using ON MATCH on created relationship
Using ON MATCH on a relationship
Using ON CREATE and ON MATCH
Creating relationship using merged nodes
Mixing MERGE with CREATE
Introduce named paths 1
Introduce named paths 2
Use outgoing direction when unspecified
Match outgoing relationship when direction unspecified
Match both incoming and outgoing relationships when direction unspecified
Using list properties via variable
Matching using list property
Using bound variables from other updating clause
UNWIND with multiple merges
Do not match on deleted entities
Do not match on deleted relationships
Aliasing of existing nodes 1
Aliasing of existing nodes 2
Double aliasing of existing nodes 1
Double aliasing of existing nodes 2
Setting a node property to null removes the existing property
Setting a relationship property to null removes the existing property
Set a property
Set a property to an expression
Set a property by selecting the node using a simple expression
Set a property by selecting the relationship using a simple expression
Setting a property to null removes the property
Add a label to a node
Adding a list property
Concatenate elements onto a list property
Concatenate elements in reverse onto a list property
Overwrite values when using +=
Retain old values when using +=
Explicit null values in a map remove old values
Non-existent values in a property map are removed with SET =
Unwind with merge
Fail when trying to create using an undirected relationship pattern
Accept skip zero
Handling non-string operands for STARTS WITH
Handling non-string operands for CONTAINS
Handling non-string operands for ENDS WITH
Returning nested expressions based on list property

Returning label predicate on null node
`type()` on mixed null and non-null relationships
`type()` on null relationship
Return two subgraphs with bound undirected relationship and optional relationship
Respect predicates on the OPTIONAL MATCH
Optionally matching self-loops
Optionally matching self-loops without matches
OPTIONAL MATCH with previously bound nodes
OPTIONAL MATCH with labels on the optional end node
OPTIONAL MATCH and bound nodes
MATCH and OPTIONAL MATCH on same pattern
Handling correlated optional matches; first does not match implies second does not match
Do not fail when predicates on optionally matched and missed nodes are invalid

Many CREATE clauses

Comparing strings and integers using > in an AND'd predicate
Comparing strings and integers using > in a OR'd predicate
Comparing across types yields null, except numbers
