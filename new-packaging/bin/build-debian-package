#!/usr/bin/env bash
set -eu
# build-debian-packages:
# Build Debian packages for Neo4j from tarball

if [ $# -ne 3 ]
then
  echo "Usage: ${0} <workspace> <tarball> <distribution>"
  exit 1
fi

# Read in shared functions
. "$(dirname ${0})/shared.sh"

package_directory=${1}
tarball=${2}
distribution=${3}

echo "Building Debian package"
echo "Package directory: ${package_directory}"
echo "Tarball: ${tarball}"
echo "Distribution: ${distribution}"

# Get version(s)
parse_version ${tarball}

echo "Deb version: ${deb_version}"

# Figure if community or enterprise
parse_pkgname ${tarball}

echo "Package name: ${package_name}"

# Extract tarball and prepare workspace
mkdir -p ${package_directory}/server
tar --strip-components=1 -xf ${tarball} -C ${package_directory}/server

cp -r src/debian ${package_directory}

# Remove cypher-shell stuff if present
find ${package_directory}/server -iname "*cypher-shell*" | xargs --no-run-if-empty rm

# Rename service files to match package-name so we still get a service called neo4j
cp src/common/neo4j.service ${package_directory}/debian/${package_name}.neo4j.service
cp src/common/neo4j.default ${package_directory}/debian/${package_name}.neo4j.default
cp src/common/neo4j.init ${package_directory}/debian/${package_name}.neo4j.init

# Rename rules input files to match package
for file in $(cd ${package_directory}/debian && ls package.*)
do
  postfix=$(echo ${file} | cut -c8-)
  newname=${package_directory}/debian/${package_name}${postfix}
  mv ${package_directory}/debian/${file} ${newname}
done
if [ ${package_name} = "neo4j-enterprise" ]
then
  cat ${package_directory}/debian/license-agreement-preinst >> ${package_directory}/debian/${package_name}.preinst
fi

# Update changelog, control and files with package name etc
DISTRIBUTION=${distribution} DATE=`date -R` PACKAGE_NAME=${package_name} VERSION=${deb_version} envsubst '${DATE} ${DISTRIBUTION} ${PACKAGE_NAME} ${VERSION}' < src/debian/changelog > ${package_directory}/debian/changelog
DISTRIBUTION=${distribution} DATE=`date -R` PACKAGE_NAME=${package_name} VERSION=${deb_version} envsubst '${DATE} ${DISTRIBUTION} ${PACKAGE_NAME} ${VERSION}' < src/debian/NEWS.Debian > ${package_directory}/debian/NEWS.Debian
[[ ${package_name} = "neo4j" ]] && replaces="neo4j-enterprise" || replaces="neo4j"
PACKAGE_NAME=${package_name} REPLACES=${replaces} envsubst '${PACKAGE_NAME} ${REPLACES}' < src/debian/control > ${package_directory}/debian/control
PACKAGE_NAME=${package_name} VERSION=${deb_version} envsubst '${PACKAGE_NAME} ${VERSION}' < src/debian/files > ${package_directory}/debian/files
PACKAGE_NAME=${package_name} envsubst '${PACKAGE_NAME}' < src/debian/package.lintian-overrides > ${package_directory}/debian/${package_name}.lintian-overrides

# Make the Neo4j wrapper scripts available to debuild
scripts_directory=${package_directory}/server/scripts
mkdir -p ${scripts_directory}
script=src/common/neo4j-script
cp ${script} ${scripts_directory}/neo4j
cp ${script} ${scripts_directory}/neo4j-admin
cp ${script} ${scripts_directory}/neo4j-import
cp ${script} ${scripts_directory}/neo4j-shell
if [ ${package_name} = "neo4j-enterprise" ]
then
  cp ${script} ${scripts_directory}/neo4j-backup
fi

# Copy manpages
cp -r src/common/manpages ${package_directory}

# Make UDC successful
sed -i 's/unsupported.dbms.udc.source=tarball/unsupported.dbms.udc.source=debian/' ${package_directory}/server/conf/neo4j.conf

# Modify directories to match the FHS (https://www.debian.org/doc/packaging-manuals/fhs/fhs-2.3.html)
configuration_file=${package_directory}/server/conf/neo4j.conf
sed -i 's/#*dbms.directories.data=.*/dbms.directories.data=\/var\/lib\/neo4j\/data/'             ${configuration_file}
sed -i 's/#*dbms.directories.plugins=.*/dbms.directories.plugins=\/var\/lib\/neo4j\/plugins/' ${configuration_file}
sed -i 's/#*dbms.directories.import=.*/dbms.directories.import=\/var\/lib\/neo4j\/import/'     ${configuration_file}
sed -i 's/#*dbms.directories.logs=.*/dbms.directories.logs=\/var\/log\/neo4j/'     ${configuration_file}
sed -i 's/#*dbms.directories.run=.*/dbms.directories.run=\/var\/run\/neo4j/'     ${configuration_file}
sed -i 's/#*dbms.directories.lib=.*/dbms.directories.lib=\/usr\/share\/neo4j\/lib/'     ${configuration_file}
sed -i 's/#*dbms.directories.certificates=.*/dbms.directories.certificates=\/var\/lib\/neo4j\/certificates/'     ${configuration_file}
sed -i 's/#*dbms.directories.metrics=.*/dbms.directories.metrics=\/var\/lib\/neo4j\/metrics/'     ${configuration_file}

# Make scripts executable
chmod 700 ${package_directory}/server/bin/*
chmod 700 ${scripts_directory}/*

# build package and metadata files
cd ${package_directory} && debuild -A -uc -us --lintian-opts --profile debian
