article.guide
  carousel.deck.container-fluid
    slide.row-fluid
      .col-sm-3
        h5 Mini graph app
        br
        h3 Network Management
        p.lead Cascading dependencies
      .col-sm-6
        p An enterprise network is a graph of equipment and applications.
        p This guide will show you how to:
        ol.big
          li Create: insert records for network components
          li Find: retrieve individual components
          li Query: discover dependency relationships
          li Solve: impact analysis
    slide.row-fluid
      .col-sm-3
        h5 Network Management
        br
        h3 Create
        p To the right is a code block containing a single Cypher query statement
          | composed of multiple CREATE clauses. This will create the network graph.
        ol
          li Click on the code
          li Notice it gets copied to the editor above &uarr;
          li Click the editor's play button to exectute
          li Wait for the query to finish
        p.text-center.text-warning.bg-warning WARNING: This adds data to the current database, each time it is run!
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='cypher') cypher
          | &nbsp;
          a(help-topic='create') CREATE
      .col-sm-9
        figure
          pre.pre-scrollable.code.runnable.
            CREATE (crm:Application {
                  application: "CRM",
                  ip:'10.10.32.1',
                  host:'crm-host'
                })
            CREATE (erp:Application {
                  application: "ERP",
                  ip:'10.10.33.1',
                  host:'erp-host'
                })
            CREATE (datawarehouse:DataWarehouse {
                  ip:'10.10.34.1',
                  host:'datawarehouse-host'
                })
            CREATE (publicwebsite1:PublicWebsite {
                  ip:'10.10.35.1',
                  host:'global.acme.com'
                })
            CREATE (publicwebsite2:PublicWebsite {
                  ip:'10.10.35.2',
                  host:'support.acme.com'
                })
            CREATE (publicwebsite3:PublicWebsite {
                  ip:'10.10.35.3',
                  host:'shop.acme.com'
                })
            CREATE (publicwebsite4:PublicWebsite {
                  ip:'10.10.35.4',
                  host:'training.acme.com'
                })
            CREATE (publicwebsite5:PublicWebsite {
                  ip:'10.10.35.1',
                  host:'partners.acme.com'
                })
            CREATE (internalwebsite1:InternalWebsite {
                  ip:'10.10.35.2',
                  host:'events.acme.net'
                })
            CREATE (internalwebsite2:InternalWebsite {
                  ip:'10.10.35.3',
                  host:'intranet.acme.net'
                })
            CREATE (internalwebsite3:InternalWebsite {
                  ip:'10.10.35.4',
                  host:'humanresources.acme.net'
                })
            CREATE (webservervm1:WebserverVM {
                  ip:'10.10.35.5',
                  host:'webserver1-vm-host'
                })
            CREATE (webservervm2:WebserverVM {
                  ip:'10.10.35.6',
                  host:'webserver2-vm-host'
                })
            CREATE (databasevm1:CustomerDatabase {
                  ip:'10.10.35.7',
                  host:'customerdatabase1-host'
                })
            CREATE (databasevm2:CustomerDatabase {
                  ip:'10.10.35.8',
                  host:'customerdatabase2-host'
                })
            CREATE (databasevm3:DatabaseVM {
                  ip:'10.10.35.9',
                  host:'erpdatabase-host'
                })
            CREATE (databasevm4:DWDatabase {
                  ip:'10.10.35.10',
                  host:'dwdatabase-host'
                })
            CREATE (hardware1:Hardware {
                  ip:'10.10.35.11',
                  host:'hardware1-host'
                })
            CREATE (hardware2:Hardware {
                  ip:'10.10.35.12',
                  host:'hardware2-host'
                })
            CREATE (hardware3:Hardware {
                  ip:'10.10.35.13',
                  host:'hardware3-host'
                })
            CREATE (san1:SAN {
                  ip:'10.10.35.14',
                  host:'san-host'
                })

            CREATE (crm)-[:DEPENDS_ON]->(databasevm1)

            CREATE  (publicwebsite1)-[:DEPENDS_ON]->(databasevm1),
                  (publicwebsite2)-[:DEPENDS_ON]->(databasevm1),
                  (publicwebsite3)-[:DEPENDS_ON]->(databasevm1)

            CREATE  (databasevm1)-[:DEPENDS_ON]->(hardware1)

            CREATE  (hardware1)-[:DEPENDS_ON]->(san1)

            CREATE  (webservervm1)<-[:DEPENDS_ON]-(publicwebsite1),
                (webservervm1)<-[:DEPENDS_ON]-(publicwebsite2),
                (webservervm1)<-[:DEPENDS_ON]-(publicwebsite3)

            CREATE  (webservervm1)<-[:DEPENDS_ON]-(internalwebsite1),
                (webservervm1)<-[:DEPENDS_ON]-(internalwebsite2),
                (webservervm1)<-[:DEPENDS_ON]-(internalwebsite3)

            CREATE  (webservervm1)-[:DEPENDS_ON]->(hardware2)

            CREATE  (hardware2)-[:DEPENDS_ON]->(san1)

            CREATE  (webservervm2)-[:DEPENDS_ON]->(hardware2)

            CREATE  (webservervm2)<-[:DEPENDS_ON]-(publicwebsite4),
                (webservervm2)<-[:DEPENDS_ON]-(publicwebsite5)

            CREATE  (hardware2)<-[:DEPENDS_ON]-(databasevm2)

            CREATE  (publicwebsite4)-[:DEPENDS_ON]->(databasevm2),
                  (publicwebsite5)-[:DEPENDS_ON]->(databasevm2)

            CREATE  (hardware3)-[:DEPENDS_ON]->(san1)

            CREATE  (hardware3)<-[:DEPENDS_ON]-(databasevm3)

            CREATE  (erp)-[:DEPENDS_ON]->(databasevm3)

            CREATE  (hardware3)<-[:DEPENDS_ON]-(databasevm4)

            CREATE  (datawarehouse1)-[:DEPENDS_ON]->(databasevm4)

            RETURN san1

    slide.row-fluid
      .col-sm-3
        h5 Network Management
        br
        h3 Find
        p Example queries for finding individual nodes.
        ol
          li Click on any query example
          li Run the query from the editor
          li Notice the syntax pattern
          li Try looking for other movies or actors
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='match') MATCH
          | &nbsp;
          a(help-topic='where') WHERE
          | &nbsp;
          a(help-topic='return') RETURN
      .col-sm-9
        p.lead Find the actor named &quot;Tom Hanks&quot;...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (tom {name: "Tom Hanks"}) RETURN tom
        p.lead Find the movie with title &quot;Cloud Atlas&quot;...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (cloudAtlas {title: "Cloud Atlas"}) RETURN cloudAtlas
        p.lead Find 10 people...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (people:Person) RETURN people.name LIMIT 10
        p.lead Find movies released in the 1990s...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (nineties:Movie) WHERE nineties.released > 1990 AND nineties.released < 2000 RETURN nineties.title

    slide.row-fluid
      .col-sm-3
        h5 Network Management
        br
        h3 Query
        p Finding patterns within the graph.
        ol
          li Actors are people who acted in movies
          li Directors are people who directed a movie
          li What other relationships exist?
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='match') MATCH
      .col-sm-9
        p.lead List all Tom Hanks movies...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (tom:Person {name: "Tom Hanks"})-[:ACTED_IN]->(tomHanksMovies) RETURN tom,tomHanksMovies
        p.lead Who directed "Cloud Atlas"?
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (cloudAtlas {title: "Cloud Atlas"})<-[:DIRECTED]-(directors) RETURN directors.name
        p.lead Tom Hanks' co-actors...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (tom:Person {name:"Tom Hanks"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors) RETURN coActors.name
        p.lead How people are related to "Cloud Atlas"...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (people:Person)-[relatedTo]-(:Movie {title: "Cloud Atlas"}) RETURN people.name, Type(relatedTo), relatedTo

    slide.row-fluid
      .col-sm-3
        h5 Network Management
        br
        h3 Solve
        p You've heard of the classic "Six Degrees of Kevin Bacon"?
          | That is simply a shortest path query called the "Bacon Path".
        ol
          li Variable length patterns
          li Built-in shortestPath() algorithm
        hr
        p
          small Neo4j Manual
            ul
              li
                a(href='http://neo4j.com/docs/{{neo4j.version | neo4jdoc }}/query-match.html#match-variable-length-relationships') variable length relationships
              li
                a(href='http://neo4j.com/docs/{{neo4j.version | neo4jdoc }}/query-match.html#match-shortest-path') shortestPath
      .col-sm-9
        p.lead Movies and actors up to 4 "hops" away from Kevin Bacon
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (bacon:Person {name:"Kevin Bacon"})-[*1..4]-(hollywood)
            RETURN DISTINCT hollywood
        p.lead Bacon path, the shortest path of any relationships to Meg Ryan
        figure
          pre.pre-scrollable.code.runnable.
            MATCH p=shortestPath(
              (bacon:Person {name:"Kevin Bacon"})-[*]-(meg:Person {name:"Meg Ryan"})
            )
            RETURN p
    slide.row-fluid
      .col-sm-3
        h5 Network Management
        br
        h3 Clean up
        p When you're done experimenting, you can remove the movie data set.
        p Note:
        ol
          li Nodes can't be deleted if relationships exist
          li Delete both nodes and relationships together
        p.text-center.text-warning.bg-warning WARNING: This will remove all Person and Movie nodes!
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='delete') DELETE
      .col-sm-9
        p.lead Delete all Movie and Person nodes, and their relationships
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (a:Person),(m:Movie) OPTIONAL MATCH (a)-[r1]-(), (m)-[r2]-() DELETE a,r1,m,r2
        p.lead Prove that the Movie Graph is gone
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (n) RETURN n
    slide.row-fluid.header
      .col-sm-4
        h4 Network Management
        br
        h3 Next steps
      .col-sm-4
        h3 Review getting started
        ul.undecorated
          li
            a(play-topic='intro') Intro
            |  - a guided tour
          li
            a(play-topic='concepts') Concepts
            |  - GraphDB 101
          li
            a(play-topic='cypher') Cypher
            |  - query language
      .col-sm-4
        h3 Try more code
        ul.undecorated
          li
            a(play-topic='movie-graph') The Movie Graph
          //- li
          //-   a(play-topic='product-graph') Product Recommendations
