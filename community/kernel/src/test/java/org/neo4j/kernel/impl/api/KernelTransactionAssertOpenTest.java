/*
 * Copyright (c) 2002-2018 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.neo4j.kernel.impl.api;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

import org.neo4j.graphdb.NotInTransactionException;
import org.neo4j.graphdb.TransactionTerminatedException;
import org.neo4j.internal.kernel.api.Read;
import org.neo4j.internal.kernel.api.SchemaRead;
import org.neo4j.internal.kernel.api.Write;
import org.neo4j.internal.kernel.api.exceptions.KernelException;
import org.neo4j.kernel.api.KernelTransaction;
import org.neo4j.kernel.api.exceptions.Status;
import org.neo4j.kernel.api.security.AnonymousContext;
import org.neo4j.values.storable.Values;

@RunWith( Parameterized.class )
public class KernelTransactionAssertOpenTest extends KernelTransactionTestBase
{
    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    @Parameterized.Parameter( 0 )
    public String name;

    @Parameterized.Parameter( 1 )
    public Operation transactionOperation;

    @Parameterized.Parameters( name = "{0}" )
    public static Collection<Object[]> parameters()
    {
        // Some samples of operations that should react to transaction killing. Not exhaustive.
        return Arrays.asList(
                operation( "nodeExists", ( read, write, schema ) -> read.nodeExists( 0 ) ),
                operation( "singleRelationship", ( read, write, schema ) -> read.singleRelationship( 0, null ) ),
                operation( "nodeCreate", ( read, write, schema ) -> write.nodeCreate() ),
                operation( "relationshipSetProperty", ( read, write, schema ) -> write.relationshipSetProperty( 0, 2, Values.longValue( 42 ) ) ),
                operation( "indexesGetAll", ( read, write, schema ) -> schema.indexesGetAll() ) );
    }

    private static Object[] operation( String name, Operation op )
    {
        return new Object[]{name, op};
    }

    @Test( expected = TransactionTerminatedException.class )
    public void shouldThrowTerminateExceptionWhenTransactionTerminated() throws KernelException
    {
        KernelTransaction transaction = newTransaction( AnonymousContext.write() );

        transaction.success();
        transaction.markForTermination( Status.General.UnknownError );

        transactionOperation.operate( transaction.dataRead(), transaction.dataWrite(), transaction.schemaRead() );
    }

    @Test( expected = NotInTransactionException.class )
    public void shouldThrowNotInTransactionWhenTransactionClosedAndAccessingOperations() throws KernelException
    {
        KernelTransaction transaction = newTransaction( AnonymousContext.write() );

        transaction.success();
        transaction.close();

        transactionOperation.operate( transaction.dataRead(), transaction.dataWrite(), transaction.schemaRead() );
    }

    @Test( expected = NotInTransactionException.class )
    public void shouldThrowNotInTransactionWhenTransactionClosedAndAttemptingOperations() throws KernelException
    {
        KernelTransaction transaction = newTransaction( AnonymousContext.write() );

        Read read = transaction.dataRead();
        Write write = transaction.dataWrite();
        SchemaRead schemaRead = transaction.schemaRead();

        transaction.success();
        transaction.close();

        transactionOperation.operate( read, write, schemaRead );
    }

    interface Operation
    {
        void operate( Read read, Write write, SchemaRead schemaRead ) throws KernelException;
    }
}
