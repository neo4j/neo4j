[[security-server]]
= Securing Neo4j Server

== Secure the port and remote client connection accepts ==

By default, the Neo4j Server is bundled with a Web server that binds to host +localhost+ on port +7474+, answering only requests from the local machine.

This is configured in the _conf/neo4j-server.properties_ file:

[source,properties]
----
# http port (for all data, administrative, and UI access)
org.neo4j.server.webserver.port=7474

# Let the webserver only listen on the specified IP. Default is localhost (only
# accept local connections). Uncomment to allow any connection.
#org.neo4j.server.webserver.address=0.0.0.0
----

If you want the server to listen to external hosts, configure the Web server in the _conf/neo4j-server.properties_ by setting the property +org.neo4j.server.webserver.address=0.0.0.0+ which will cause the server to bind to all available network interfaces.
Note that firewalls et cetera have to be configured accordingly as well.

[[security-server-auth]]
== Server authentication and authorization ==

Neo4j requires clients to supply authentication credentials when accessing the REST API.
Without valid credentials, access to the database will be forbidden.

The authentication and authorization data is stored under _data/dbms/auth_.
If necessary, this file can be copied over to other neo4j instances to ensure they share the same username/password (see <<rest-api-security-copy-config>>).

Please refer to <<rest-api-security>> for additional details.
When accessing Neo4j over unsecured networks, make sure HTTPS is configured and used for access (see <<security-server-https>>).

If necessary, authentication may be disabled.
This will allow any client to access the database without supplying authentication credentials.

[source,properties]
----
# Disable authorization
dbms.security.auth_enabled=false
----

[WARNING]
Disabling authentication is not recommended, and should only be done if the operator has a good understanding of their network security, including protection against http://en.wikipedia.org/wiki/Cross-site_scripting[cross-site scripting (XSS)] attacks via web browsers.
Developers should not disable authentication if they have a local installation using the default listening ports.

[[security-server-https]]
== HTTPS support ==

The Neo4j server includes built in support for SSL encrypted communication over HTTPS.
The first time the server starts, it automatically generates a self-signed SSL certificate and a private key.
Because the certificate is self signed, it is not safe to rely on for production use, instead, you should provide your own key and certificate for the server to use.

To provide your own key and certificate, replace the generated key and certificate, or change the _conf/neo4j-server.properties_ file to set the location of your certificate and key:

[source,properties]
----
# Certificate location (auto generated if the file does not exist)
dbms.security.tls_certificate_file=ssl/snakeoil.cert

# Private key location (auto generated if the file does not exist)
dbms.security.tls_key_file=ssl/snakeoil.key
----

Note that the key should be unencrypted.
Make sure you set correct permissions on the private key, so that only the Neo4j server user can read/write it.

Neo4j also supports chained SSL certificates.
This requires to have all certificates in PEM format combined in one file and the private key needs to be in DER format.

You can set what port the HTTPS connector should bind to in the same configuration file, as well as turn HTTPS off:

[source,properties]
----
# Turn https-support on/off
org.neo4j.server.webserver.https.enabled=true

# https port (for all data, administrative, and UI access)
org.neo4j.server.webserver.https.port=443
----

== Arbitrary code execution ==

[IMPORTANT]
The Neo4j server exposes remote scripting functionality by default that allow full access to the underlying system.
Exposing your server without implementing a security layer presents a substantial security vulnerability.

By default, the Neo4j Server comes with some places where arbitrary code code execution can happen. These are the <<rest-api-traverse>> REST endpoints.
To secure these, either disable them completely by removing offending plugins from the server classpath, or secure access to these URLs through proxies or Authorization Rules.
Also, the Java Security Manager, see http://docs.oracle.com/javase/7/docs/technotes/guides/security/index.html, can be used to secure parts of the codebase.

== Server authorization rules ==

Administrators may require more fine-grained security policies in addition to the basic authorization and/or IP-level restrictions on the Web server.
Neo4j server supports administrators in allowing or disallowing access the specific aspects of the database based on credentials that users or applications provide.

To facilitate domain-specific authorization policies in Neo4j Server, security rules can be implemented and registered with the server.
This makes scenarios like user and role based security and authentication against external lookup services possible.
See +org.neo4j.server.rest.security.SecurityRule+ in the javadocs downloadable from http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.neo4j.app%22%20AND%20a%3A%22neo4j-server%22[Maven Central (org.neo4j.app:neo4j-server)].

[CAUTION]
The use of Server Authorization Rules may interact unexpectedly with the built-in authentication and authorization (see <<security-server-auth>>), if enabled.

include::enforcing-server-authorization-rules.asciidoc[]

include::using-wildcards-to-target-security-rules.asciidoc[]

include::using-complex-wildcards-to-target-security-rules.asciidoc[]


== Using a proxy ==

Although the Neo4j server has a number of security features built-in (see the above chapters), for sensitive deployments it is often sensible to front against the outside world it with a proxy like Apache `mod_proxy` footnote:[http://httpd.apache.org/docs/2.2/mod/mod_proxy.html].

This provides a number of advantages:

* Control access to the Neo4j server to specific IP addresses, URL patterns and IP ranges. This can be used to make for instance only the '/db/data' namespace accessible to non-local clients, while the '/db/admin' URLs only respond to a specific IP address.
+
[source]
---------------
<Proxy *>
  Order Deny,Allow
  Deny from all
  Allow from 192.168.0
</Proxy>
---------------
+
While it is possible to develop plugins using Neo4j's `SecurityRule` (see above), operations professionals would often prefer to configure proxy servers such as Apache.
However, it should be noted that in cases where both approaches are being used, they will work harmoniously provided that the behavior is consistent across proxy server and `SecurityRule` plugins.

* Run Neo4j Server as a non-root user on a Linux/Unix system on a port < 1000 (e.g. port 80) using
+
[source]
---------------
ProxyPass /neo4jdb/data http://localhost:7474/db/data
ProxyPassReverse /neo4jdb/data http://localhost:7474/db/data
---------------

* Simple load balancing in a clustered environment to load-balance read load using the Apache `mod_proxy_balancer` footnote:[http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html] plugin
+
[source]
--------------
<Proxy balancer://mycluster>
BalancerMember http://192.168.1.50:80
BalancerMember http://192.168.1.51:80
</Proxy>
ProxyPass /test balancer://mycluster
--------------

== LOAD CSV

The Cypher `LOAD CSV` clause can load files from the filesystem, and its default configuration allows any file on the system to be read using a `file:///` URL.
This presents a security vulnerability in production environments where database users should not otherwise have access to files on the system.
For production deployments, configure the <<config_dbms.security.load_csv_file_url_root>> setting, which will make all files identified in a `file:///` URL relative to the specified directory, similarly to how a unix chroot works.
Alternatively, set the <<config_allow_file_urls>> setting to false, which disables the use of `file:///` URLs entirely.
Further information can be found in <<query-load-csv>>.

== Neo4j Web Interface Security

For configuration settings to consider in order to get the level of security you want to achieve, see <<server-browser-config>>.
