[[ndp-messaging]]
== Messaging layer

This section discusses the semantic meaning and layout of protocol messages.
For details on how Neo4j types are represented in binary form, see <<ndp-serialization,serialization>>.

Clients may send request messages at any time.
Clients may <<ndp-messaging-pipelining,pipeline>> requests, sending multiple requests together.

Servers must fully respond to each request before the next request is processed and processing must be done in the same order requests arrived in for a given session.

Servers must ignore messages sent by the client after a failure occurs on the server, until the client has acknowledged the failure. See Failure & Acknowledgement.

For each request message sent, clients should expect to receive zero or more detail messages followed by exactly one summary message.
The detail messages deliver the response content, while a summary message denotes the end of the response and any response metadata.
Note that these are classifications of message, not specific message types.
For example, `RECORD` messages are classed as detail messages and `SUCCESS` messages as summary messages.

The diagrams below illustrates a basic exchange wherein the client sends a fictional request message and receives a series of response messages.

image:images/simple-exchange.png[]

[[ndp-messaging-pipelining]]
=== Pipelining

The client is not required to wait for a response before sending more messages.
Sending multiple messages together like this is called pipelining:

image:images/pipelining.png[]

For performance reasons, it is recommended that clients use pipelining as much as possible.
Through pipelining, multiple messages can be transmitted together in the same network package, significantly reducing latency and increasing throughput.

TIP: A common technique is to buffer outgoing messages on the client until the last possible moment, such as when a
commit is issued or a result is read by the application, and then sending all messages in the buffer together.

=== Failure handling

Because the protocol leverages pipelining, the client and the server need to agree on what happens when a failure
occurs, otherwise messages that were sent assuming no failure would occur might have unintended effects.

When requests fail on the server, this is signalled to the client via a `FAILURE` message.
After a failure, the server will not accept any messages it recieves until the client sends an `ACK_FAILURE` message.
The server should issue an IGNORED message in response to any other kind of message sent by the client until an `ACK_FAILURE` has been received.

The diagram below illustrates a typical flow involving `ACK_FAILURE` messages:

image:images/failure-ack.png[]

Here, the original failure is acknowledged immediately by the client, allowing the subsequent RUN to be actioned as expected.

This second diagram shows a sequence where a pair of request messages are sent together:

image:images/failure-optimistic.png[]

Here, the client optimistically sends a pair of messages. The first of these fails and the second is consequently
`IGNORED`.
Once the client acknowledges the failure, it is then able to resend a corrected RUN message.


[[ndp-message-structs]]
=== Messages

Protocol messages are represented as <<ndp-packstream-structures,serialized structures>>.

==== RUN

The `RUN` message is a client message that is used to start a new job on the server. It has the following structure:

[source,ndp_message_struct]
----
RunMessage (signature=0x10) {
    Text             statement
    Map<Text,Value>  parameters
}
----

On receipt of a `RUN` message, a server should start a new job by executing the statement with the parameters supplied.
If successful, the subsequent response should consist of a single `SUCCESS` message; if not, a `FAILURE` response should
 be sent instead.
A successful job will always produce a result stream which must then be explicitly consumed, even if empty.

In the case where a previous result stream has not yet been fully consumed (via `PULL_ALL` or `DISCARD_ALL`), an
attempt to `RUN` a new job should trigger a `FAILURE` response.

If an unacknowledged failure is pending from a previous exchange, the server must immediately respond with a single
`IGNORED` message and take no further action.

.Example
[source,ndp_packstream_type]
----
Value: RUN "RETURN 1 AS num" {}

B2 10 8F 52  45 54 55 52  4E 20 31 20  41 53 20 6E  75 6D A0
----

==== DISCARD_ALL

The `DISCARD_ALL` message is a client message that is used to discard all remaining items from the active result
stream. It has the following structure:

[source,ndp_message_struct]
----
DiscardAllMessage (signature=0x2F) {
}
----

On receipt of a `DISCARD_ALL` message, a server should dispose of all remaining items from the active result stream.
If no result stream is currently active, the server should respond with a single FAILURE message.

If an unacknowledged failure is pending from a previous exchange, the server must immediately respond with a single IGNORED message and take no further action.

.Example
[source,ndp_packstream_type]
----
Value: DISCARD_ALL

B0 7E
----

==== PULL_ALL
The `PULL_ALL` message is a client message that is used to retrieve all remaining items from the active result stream.
It has the following structure:

[source,ndp_message_struct]
----
PullAllMessage (signature=0x3F) {
}
----

On receipt of a `PULL_ALL` message, a server should send all remaining result data items to the client, each in a
single `RECORD` message, followed by a single `SUCCESS` message which may contain summary information on the data items
sent.
If an error is encountered, the server must instead send a `FAILURE` message and discard all remaining data items.

If an unacknowledged failure is pending from a previous exchange, the server must immediately respond with a single IGNORED message and take no further action.

.Example
[source,ndp_packstream_type]
----
Value: PULL_ALL

B0 3F
----

==== ACK_FAILURE

The `ACK_FAILURE` message is a client message that is used to signal that a client has acknowledged a previous `FAILURE`
. It has the following structure:

[source,ndp_message_struct]
----
AcknowledgeFailureMessage (signature=0x0F) {
}
----

On receipt of an `ACK_FAILURE` message, a server should clear any pending failure state and respond with a single
`SUCCESS` message. If no such failure state is pending, a FAILURE message should be sent instead.

An `ACK_FAILURE` should never be ignored.

.Example
[source,ndp_packstream_type]
----
Value: ACK_FAILURE

B0 0F
----

==== RECORD

The `RECORD` message is a server detail message used to deliver data from the server to the client. Each record
message contains a single List, which in turn contains the fields of the record in order. It has the following structure:

[source,ndp_message_struct]
----
RecordMessage (signature=0x71) {
    List<Value> fields
}
----

.Example
[source,ndp_packstream_type]
----
Value: RECORD [1,2,3]

B1 71 93 01  02 03
----

==== SUCCESS

The `SUCCESS` message is a server summary message that is used to signal that a corresponding client message has been
received and actioned as intended. It has the following structure:

[source,ndp_message_struct]
----
SuccessMessage (signature=0x70) {
    Map<Text,Value> metadata
}
----

.Example
[source,ndp_packstream_type]
----
Value: SUCCESS {fields:["name", "age"]}

B1 70 A1 86  66 69 65 6C  64 73 92 84  6E 61 6D 65
83 61 67 65
----

==== FAILURE

The `FAILURE` message is a server summary message that is used to signal that a corresponding client message has
encountered an error while being actioned. It has the following structure:

[source,ndp_message_struct]
----
FailureMessage (signature=0x7F) {
    Map<Text,Value> metadata
}
----

`FAILURE` messages contain metadata which describe the detail of the primary failure that has occurred. This metadata
is a simple map containing a code and a message. These codes map to the standard Neo4j status codes.

.Example
[source,ndp_packstream_type]
----
Value: FAILURE {code:"Neo.ClientError.Statement.InvalidSyntax", message:"Invalid syntax."}

B1 7F A2 84  63 6F 64 65  D0 27 4E 65  6F 2E 43 6C
69 65 6E 74  45 72 72 6F  72 2E 53 74  61 74 65 6D
65 6E 74 2E  49 6E 76 61  6C 69 64 53  79 6E 74 61
78 87 6D 65  73 73 61 67  65 8F 49 6E  76 61 6C 69
64 20 73 79  6E 74 61 78  2E
----

==== IGNORED

The `IGNORED` message is a server summary message that is used to signal that a corresponding client message has been
ignored and not actioned. It has the following structure:

[source,ndp_message_struct]
----
IgnoredMessage (signature=0x7E) {
    Map<Text,Value>  metadata
}
----

A client message will be ignored if an earlier failure has not yet been acknowledged by the client via an `ACK_FAILURE` message.
This will occur if the client optimistically sends a group of messages, one of which fails during execution: all subsequent messages in that group will then be ignored.

.Example
[source,ndp_packstream_type]
----
Value: IGNORED

B0 7E
----
