[[tutorials-java-embedded-traversal]]
Traversal
=========

For reading about traversals, see <<tutorial-traversal>>.

For more examples of traversals, see <<data-modeling-examples>>.

== The Matrix ==

This is the first graph we want to traverse into:

image::examples-matrix.png[title="Matrix node space view", scaledwidth="75%"]

[TIP]
The source code of this example is found here:
https://github.com/neo4j/neo4j/blob/{neo4j-git-tag}/community/embedded-examples/src/main/java/org/neo4j/examples/NewMatrix.java[NewMatrix.java]

.Friends and friends of friends
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=get-friends
----

Let's perform the actual traversal and print the results:

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=friends-usage
----

Which will give us the following output:

include::matrix-traversal-java-new-friends.asciidoc[]

.Who coded the Matrix?
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=find-hackers
----

Print out the result:    

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/NewMatrix.java
tag=find--hackers-usage
----

Now we know who coded the Matrix:

include::matrix-traversal-java-new-hackers.asciidoc[]


=== Walking an ordered path ===

This example shows how to use a path context holding a representation of a path.

[TIP]
The source code of this example is found here:
https://github.com/neo4j/neo4j/blob/{neo4j-git-tag}/community/embedded-examples/src/main/java/org/neo4j/examples/orderedpath/OrderedPath.java[OrderedPath.java]

.Create a toy graph
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=createGraph
----

["dot", "example-ordered-path.svg"]
----
A -> B [label="REL1" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
A -> C [label="REL2"]
B -> C [label="REL2" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
C -> D [label="REL3" color="EDGEHIGHLIGHT" fontcolor="EDGEHIGHLIGHT"]
----

// include when we have reltype colors
// include::ordered-path-java-graph.asciidoc[]
// then, also include the property setting in the code.

Now, the order of relationships (+REL1+ -> +REL2+ -> +REL3+) is stored in an +ArrayList+.
Upon traversal, the +Evaluator+ can check against it to ensure that only paths are included and returned that have the predefined order of relationships:

.Define how to walk the path
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=walkOrderedPath
----

Note that we set the uniqueness to 
+http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Uniqueness.html#NODE_PATH[Uniqueness.NODE_PATH]+ 
as we want to be able to revisit the same node dureing the traversal, but not the same path.

.Perform the traversal and print the result
[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=printPath
----

Which will output:

include::ordered-path-java-output.asciidoc[]

In this case we use a custom class to format the path output.
This is how it's done:

[snippet,java]
----
component=neo4j-examples
classifier=sources
source=org/neo4j/examples/orderedpath/OrderedPath.java
tag=pathPrinter
----

For options regarding output of a +Path+, see the 
http://components.neo4j.org/neo4j/{neo4j-version}/apidocs/org/neo4j/kernel/Traversal.html[Traversal] class.


