[[server-unmanaged-extensions]]
Unmanaged Extensions 
====================

Sometimes you'll want finer grained control over your application's interactions with Neo4j than cypher provides.
For these situations you can use the unmanaged extension API.

[CAUTION]
This is a sharp tool, allowing users to deploy arbitrary http://en.wikipedia.org/wiki/JAX-RS[JAX-RS] classes to the server so be careful when using this.
In particular it's easy to consume lots of heap space on the server and degrade performance.
If in doubt please ask for help via one of the community channels (see <<preface>>).

:leveloffset: 3
[[intro-unmanaged-extensions]]
= Introduction to unmanaged extensions
The first step when writing an unmanaged extension is to create a project which includes dependencies to the JAX-RS and Neo4j core jars.
In Maven this would be achieved by adding the following lines to the pom file:

[source,xml]
--------
<dependency>
    <groupId>javax.ws.rs</groupId>
    <artifactId>javax.ws.rs-api</artifactId>
    <version>2.0</version>
    <scope>provided</scope>
</dependency>
--------

["source","xml","unnumbered","2",presubs="attributes"]
--------
<dependency>
    <groupId>org.neo4j</groupId>
    <artifactId>neo4j</artifactId>
    <version>{neo4j-version}</version>
    <scope>provided</scope>
</dependency>
--------

Now we're ready to write our extension.

In our code we'll interact with the database using +GraphDatabaseService+ which we can get access to by using the +@Context+ annotation.
The following examples serves as a template which you can base your extension on:

.Unmanaged extension example
[snippet,java]
----
component=neo4j-server-examples
source=org/neo4j/examples/server/unmanaged/HelloWorldResource.java
tag=HelloWorldResource
classifier=sources
----

The full source code is found here:
https://github.com/neo4j/neo4j/blob/{neo4j-git-tag}/community/server-examples/src/main/java/org/neo4j/examples/server/unmanaged/HelloWorldResource.java[HelloWorldResource.java]

Having built your code, the resulting jar file (and any custom dependencies) should be placed in the +$NEO4J_SERVER_HOME/plugins+ directory.
We also need to tell Neo4j where to look for the extension by adding some configuration in the _conf/neo4j-server.properties_ file:

[source]
------
#Comma separated list of JAXRS packages containing JAXRS Resource, one package name for each mountpoint.
org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged
------

Our hello method will now respond to +GET+ requests at the URI: +http://\{neo4j_server}:\{neo4j_port}/examples/unmanaged/helloworld/\{nodeId}+. e.g.

[source,bash]
-----
curl http://localhost:7474/examples/unmanaged/helloworld/123
-----

which results in
  
[source]
----
Hello World, nodeId=123
----

[CAUTION]
Whilst Neo4j is tested to run on JVM 8, Neo4j server is currently compiled using
JDK 7, to ensure compatibility for JVM 7 deployments. When compiling plugins for
Neo4j Server, we strongly recommend using JDK 7 also.

:leveloffset: 3

include::server-unmanaged-extensions-streaming.asciidoc[]

:leveloffset: 3

include::server-unmanaged-extensions-cypher-execution.asciidoc[]

:leveloffset: 2

include::server-testing.asciidoc[]


