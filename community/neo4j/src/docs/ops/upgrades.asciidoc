[[deployment-upgrading]]
= Upgrading

:manual-base-url: http://neo4j.com/docs/{neo4j-version}
:manual-ha-upgrade-guide: {manual-base-url}/ha-upgrade-guide.html
:manual-cypher-compatibility: {manual-base-url}/cypher-compatibility.html

[IMPORTANT]
This section describes upgrading a single Neo4j instance.
To upgrade a Neo4j HA cluster (Neo4j Enterprise) a very specific procedure must be followed.
Please see
ifndef::upgradetext[<<ha-upgrade-guide>>.]
ifdef::upgradetext['Upgrade of a Neo4j HA Cluster' at {manual-ha-upgrade-guide}.]

Each Neo4j version supports upgrading from a limited number of previous versions.
These upgrades are either automatic, or require explicit configuration to allow them.
Upgrades between patch releases within the same minor version are automatic.
Upgrading to the latest patch release is recommended before upgrading to new major or minor versions.

A database created by an older version of Neo4j will be upgraded during startup when opened by the target version of Neo4j.

The following Neo4j versions, where _x_ stands for the latest patch release, can be upgraded to Neo4j {neo4j-version}:

2.0.x -> {neo4j-version}::
<<explicit-upgrade,Explicit configuration is required>>

2.1.x -> {neo4j-version}::
<<explicit-upgrade,Explicit configuration is required>>

2.2.x -> {neo4j-version}::
<<explicit-upgrade,Explicit configuration is required>>

2.3.x -> {neo4j-version}::
<<explicit-upgrade,Explicit configuration is required>>

[NOTE]
Downgrade is only supported between Neo4j versions that allow for automatic store upgrades.
This typically means only within patch releases of the same Neo4j version.

[[automatic-upgrade]]
== Automatic Store Upgrade

To perform an automatic store upgrade:

. Cleanly shut down the older version of Neo4j, if it is running.

. Install Neo4j {neo4j-version}, and set it up to use the same database store directory (typically _data/databases/graph.db_).

. Make a copy of the database.
+
[IMPORTANT]
It is strongly advised to make a copy of the database store directory at this time, to use as a backup in case rollback/downgrade is required.
This is not necessary if a backup has been made using the
ifndef::upgradetext[<<operations-backup, online backup tool>>, ]
ifdef::upgradetext[online backup tool (see http://neo4j.com/docs/{neo4j-version}/operations-backup.html), ]
available with Neo4j Enterprise.

. Start up Neo4j.

. Any database store upgrade required will occur during startup.

[[explicit-upgrade]]
== Explicit Store Upgrade

To perform an explicit store upgrade:

. Install Neo4j {neo4j-version}, and set it up to use the same database store directory (typically _data/databases/graph.db_).
. Cleanly shut down the older version of Neo4j, if it is running.
. Set the Neo4j configuration parameter `allow_store_upgrade=true` in your _conf/neo4j.conf_ file.
  Neo4j will fail to start without this configuration set.
. Start up Neo4j.
. The database store upgrade will occur during startup.
. The `allow_store_upgrade` configuration parameter should be removed, set to `false` or commented out.
. Information about the upgrade and a progress indicator are logged into the _debug.log_ file, inside the database
store directory.

[CAUTION]
.Disk space requirements
====
An explicit upgrade will require substantial free disk space, as it must make an entire copy of the database store.
The upgraded store version may also require larger store files overall.
It is suggested to have available free disk space equivalent to at least 1.5 times the size of the existing store.
====

[NOTE]
.Cypher compatibility
====
The Cypher language is rapidly evolving, and may change between Neo4j versions.
However, Neo4j supports compatibility directives for Cypher, that allow explicitly selecting a language version.
This is possible to do for individual statements, or globally, as described in the
ifndef::upgradetext[<<cypher-compatibility, Cypher Compatibility section>>.]
ifdef::upgradetext[Cypher Compatibility section at {manual-cypher-compatibility}.]
====
