[[query-performance]]
= Query Performance =

== Optimizing your Cypher queries ==

Neo4j works very hard to execute queries as fast as possible.

However, when optimizing for maximum query execution performance, it may be helpful to rephrase queries using knowledge about the domain and the application.

The overall goal of manual query performance optimization is to ensure that only necessary data is retrieved from the graph.
At least data should get filtered out as early as possible in order to reduce the amount of work that has to be done at later stages of query execution.
This also goes for what gets returned: avoid returning whole nodes and relationships -- instead, pick the data you need and return only that.
You should also make sure to set an upper limit on variable length patterns, so they don't cover larger portions of the dataset than needed.

Each Cypher query gets optimized and transformed into an execution plan by the Cypher execution engine.
To minimize the resources used for this, make sure to use parameters instead of literals when possible.
This allows Cypher to re-use your queries instead of having to parse and build new execution plans.

Read <<execution-plans>> for more.

== How are queries executed? ==

Each query is turned into an execution plan by something called the _execution planner_.
The execution plan tells Neo4j which operations to perform when executing the query.
Two different execution planning strategies are included in Neo4j:

Rule::
This planner has rules that are used to produce execution plans.
The planner considers available indexes, but does not use statistical information to guide the query compilation.

Cost::
This planner uses the statistics service in Neo4j to assign cost to alternative plans and picks the cheapest one.
While this should lead to superior execution plans in most cases, it is still under development.

By default, Neo4j 2.2 will use the cost planner for some queries, but not all.
You can force it to use a specific planner by using the `query.planner.version` configuration setting (see <<config_query.planner.version>>), or by prepending your query with `PLANNER COST` or `PLANNER RULE`.
Neo4j might still not use the planner you selected -- not all queries are solvable by the cost planner at this point.

You can see which planner was used by looking at the execution plan.

[NOTE]
When Cypher is building execution plans, it looks at the schema to see if it can find indexes it can use.
These index decisions are only valid until the schema changes, so adding or removing indexes leads to the execution plan cache being flushed.
