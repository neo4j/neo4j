[[query-match]]
Match
=====

== Introduction ==

+MATCH+ is the primary way of getting data from the database into the current set of bindings.

The +MATCH+ clause allows you to specify the patterns Cypher will search for in the database.

Nodes and relationships that are already known at this stage are called _bound pattern elements_.
Cypher will now try to find the unknown parts of the pattern.

If +MATCH+ is the first clause in your query, nothing is bound at this stage.
Cypher needs starting points to do it's pattern matching.

If no bound nodes exist, Cypher can scan all nodes in the database, all nodes with a certain label, or it can use indexes to quickly find the relevant starting points.
For more information on indexes, see <<query-schema-index>>.
If you want to use index hints to force Cypher to use a specific index, read more in <<query-using>>.

+WHERE+ defines the +MATCH+ patterns in more detail.
The predicates are part of the pattern description, not a filter applied after the matching is done.
This means that +WHERE+ should always be put together with the +MATCH+ clause it belongs to.

After finding starting points -- either by using scans, indexes or already bound points -- the execution engine will use pattern matching to find matching subgraphs.
As Cypher is declarative, it can change the order of these operations.
Predicates in +WHERE+ clauses can be evaluated before pattern matching, during pattern matching, or after finding matches.


[TIP]
To understand the patterns used in the +MATCH+ clause, read <<introduction-pattern>>.

The following graph is used for the examples below:

.Graph
include::includes/cypher-match-graph.asciidoc[]

== Basic node finding ==

:leveloffset: 3

include::get-all-nodes.asciidoc[]

include::get-all-nodes-with-a-label.asciidoc[]

include::related-nodes.asciidoc[]

include::match-with-labels.asciidoc[]

:leveloffset: 2

== Relationship basics ==

:leveloffset: 3

include::outgoing-relationships.asciidoc[]

include::directed-relationships-and-identifier.asciidoc[]

include::match-by-relationship-type.asciidoc[]

include::match-by-multiple-relationship-types.asciidoc[]

include::match-by-relationship-type-and-use-an-identifier.asciidoc[]

:leveloffset: 2

== Relationships in depth ==

:leveloffset: 3

include::relationship-types-with-uncommon-characters.asciidoc[]

include::multiple-relationships.asciidoc[]

include::variable-length-relationships.asciidoc[]

include::relationship-identifier-in-variable-length-relationships.asciidoc[]

include::match-with-properties-on-a-variable-length-path.asciidoc[]

include::zero-length-paths.asciidoc[]

include::named-path.asciidoc[]

include::matching-on-a-bound-relationship.asciidoc[]

:leveloffset: 2

== Shortest path ==

:leveloffset: 3

include::single-shortest-path.asciidoc[]

include::all-shortest-paths.asciidoc[]

:leveloffset: 2


