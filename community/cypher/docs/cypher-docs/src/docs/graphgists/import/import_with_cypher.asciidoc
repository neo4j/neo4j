Importing CSV files with Cypher
===============================

//file:movies.csv
//file:roles.csv
//file:persons.csv

This tutorial will show you how to import data from CSV files using +LOAD CSV+.

In this example, we're given three CSV files: a list of persons, a list of movies, and a list of which role was played by some of these persons in each movie.

Below we will assume that the CSV files have been stored on the database server and are accessible using a +file://+ URL. Alternatively, +LOADCSV+ also supports accessing CSV files via +HTTPS+, +HTTP+, and +FTP+.

Using the following Cypher queries, we'll create a node for each person, a node for each movie and a relationship between the two with a property denoting the role.  We’re also keeping track of the country in which each movie was made. 

Let’s start with importing the persons:

[source,cypher]
----
LOAD CSV WITH HEADERS FROM "persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
----

Now, let's import the movies. This time, we're also creating 
a relationship to the country in which the movie was made. 
If you are storing your data in a SQL database, this is the one-to-many relationship type. 

We're using +MERGE+ to create nodes that represent countries. Using +MERGE+ avoids creating duplicate country nodes in the case where multiple movies have been made in the same country.

[source,cypher]
----
LOAD CSV WITH HEADERS FROM "movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(c)
----

Lastly, we create the relationships between the persons and the movies. Since the relationship is a many to many relationship, one actor can participate in many movies, and one movie has many actors in it. We have this data in a separate file. 

We'll index the id property on Person and Movie nodes. The id property is a temporary property used to look up the appropriate nodes for a relationship when importing the third file. By indexing the id property, node lookup (e.g. by +MATCH+) will be much faster. Since we expect the ids to be unique in each set, we’ll create a unique constraint. This protects us from invalid data since constraint creation will fail if there are multiple nodes with the same id property.  Creating an unique constraint also creates an unique index (which is faster than a regular index).

[source,cypher]
----
CREATE CONSTRAINT ON (p:Person) ASSERT p.id IS UNIQUE
----

[source,cypher]
----
CREATE CONSTRAINT ON (m:Movie) ASSERT m.id IS UNIQUE
----

Now importing the relationships is a matter of finding the nodes and then creating relationships between them.

[source,cypher]
----
USING PERIODIC COMMIT
LOAD CSV FROM "roles.csv" AS csvLine
MATCH (p:Person {id: csvLine[0]}), (m:Movie {id: csvLine[1]})
CREATE (p)-[:PLAYED {role: csvLine[2]}]->(m)
----

In the query above, we used +USING PERIODIC COMMIT+.
This hint tells Neo4j that the query might build up inordinate amounts of transaction state, and so needs to be periodically committed.

Finally, as the id property was only necessary to import the relationships, we can drop the constraints and the id property from all movie and person nodes.

[source,cypher]
----
DROP CONSTRAINT ON (p:Person) ASSERT p.id IS UNIQUE
----

[source,cypher]
----
DROP CONSTRAINT ON (m:Movie) ASSERT m.id IS UNIQUE
----

[source,cypher]
----
MATCH (m) WHERE m:Person OR m:Movie REMOVE m.id
----

