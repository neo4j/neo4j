[[query-merge]]
Merge
=====

== Introduction ==
+MERGE+ ensures that a pattern exists in the graph. Either the pattern already exists, or it needs to be created.

+MERGE+ either matches existing nodes and binds them, or it creates new data and binds that.
It's like a combination of +MATCH+ and +CREATE+ that additionally allows you to specify what happens if the data was matched or created.

For example, you can specify that the graph must contain a node for a user with a certain name.
If there isn't a node with the correct name, a new node will be created and its name property set.

When using +MERGE+ on full patterns, the behavior is that either the whole pattern matches, or the whole pattern is created.
+MERGE+ will not partially use existing patterns - it's all or nothing. If partial matches are needed, this can be accomplished by splitting a pattern up into multiple +MERGE+ clauses.

As with +MATCH+, +MERGE+ can match multiple occurrences of a pattern.
If there are multiple matches, they will all be passed on to later stages of the query.

The last part of +MERGE+ is the +ON CREATE+ and +ON MATCH+.
These allow a query to express additional changes to the properties of a node or relationship, depending on if the element was ++MATCH++ed in the database or if it was ++CREATE++d.

The following graph is used for the examples below:

.Graph
include::includes/cypher-merge-graph.asciidoc[]

include::merge-single-node-with-a-label.asciidoc[]

include::merge-single-node-with-properties.asciidoc[]

include::merge-single-node-specifying-both-label-and-property.asciidoc[]

include::merge-with-on-create.asciidoc[]

include::merge-with-on-match.asciidoc[]

include::merge-with-on-create-and-on-match.asciidoc[]

include::merge-on-a-relationship.asciidoc[]

include::merge-on-multiple-relationships.asciidoc[]

== Using unique constraints with MERGE ==

Cypher prevents getting conflicting results from +MERGE+ when using patterns that involve uniqueness constrains.
In this case, there must be at most one node that matches that pattern.

For example, given two uniqueness constraints on `:Person(id)` and
+:Person(ssn)+, then a query such as `MERGE (n:Person {id: 12, ssn: 437})` will fail, if there are two different nodes
(one with id 12 and one with ssn 437) or if there is only one node with only one of the properties. In other words,
there must be exactly one node that matches the pattern, or no matching nodes.

Note that the following examples assume the existence of uniqueness constraints on `:Person(name)` and `:Person(role)` that
have been created using `CREATE CONSTRAINT ON (n:Person) ASSERT n.name IS UNIQUE` and
`CREATE CONSTRAINT ON (n:Person) ASSERT n.role IS UNIQUE`:

:leveloffset: 3

include::merge-using-unique-constraints-creates-a-new-node-if-no-node-is-found.asciidoc[]

include::merge-using-unique-constraints-matches-an-existing-node.asciidoc[]

include::merge-with-unique-constraints-and-partial-matches.asciidoc[]

include::merge-with-unique-constraints-and-conflicting-matches.asciidoc[]

:leveloffset: 2

include::using-map-parameters-with-merge.asciidoc[]

