#!/usr/bin/env bash
# Copyright (c) 2002-2016 "Neo Technology,"
# Network Engine for Objects in Lund AB [http://neotechnology.com]
#
# This file is part of Neo4j.
#
# Neo4j is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Callers may provide the following environment variables to customize this script:
#  * JAVA_HOME
#  * JAVA_CMD
#  * NEO4J_CONFIG
#  * NEO4J_LOG
#  * NEO4J_PIDFILE
#  * NEO4J_START_WAIT

set -euo pipefail
[[ "${TRACE:-}" ]] && set -x

setup_neo4jhome_and_script() {
  SCRIPT=$0

  cd "$(dirname "${SCRIPT}")"
  SCRIPT="$(basename "${SCRIPT}")"

  while [ -L "${SCRIPT}" ]
  do
    SCRIPT="$(readlink "${SCRIPT}")"
    cd "$(dirname "${SCRIPT}")"
    SCRIPT="$(basename "${SCRIPT}")"
  done

  NEO4J_HOME="$(cd "$(dirname "${SCRIPT}")/.." && dirs -l +0)"
}

find_java_home() {
  [[ "${JAVA_HOME:-}" ]] && return

  case "${DIST_OS}" in
    "macosx")
      JAVA_HOME="$(/usr/libexec/java_home -v 1.8)"
      ;;
    "gentoo")
      JAVA_HOME="$(java-config --jre-home)"
      ;;
  esac
}

find_java_cmd() {
  [[ "${JAVA_CMD:-}" ]] && return
  detect_os
  find_java_home

  if [[ "${JAVA_HOME:-}" ]] ; then
    JAVA_CMD="${JAVA_HOME}/bin/java"
  else
    if [ "${DIST_OS}" != "macosx" ] ; then
      # Don't use default java on Darwin because it displays a misleading dialog box
      JAVA_CMD="$(which java || true)"
    fi
  fi

  if [[ ! "${JAVA_CMD:-}" ]]; then
    echo "ERROR: Unable to find Java executable."
    show_java_help
    exit 1
  fi
}

check_java() {
  find_java_cmd

  version_command="${JAVA_CMD} -version ${JAVA_MEMORY_OPTS}"

  JAVA_VERSION=$(${version_command} 2>&1 | awk -F '"' '/version/ {print $2}')
  if [[ "${JAVA_VERSION}" < "1.8" ]]; then
    echo "ERROR! Neo4j cannot be started using java version ${JAVA_VERSION}. "
    show_java_help
    exit 1
  fi

  if ! (${version_command} 2>&1 | egrep -q "(Java HotSpot\\(TM\\)|OpenJDK) (64-Bit Server|Server|Client) VM"); then
    echo "WARNING! You are using an unsupported Java runtime. "
    show_java_help
  fi
}

show_java_help() {
  echo "* Please use Oracle(R) Java(TM) 8 or OpenJDK(TM) to run Neo4j Server."
  echo "* Please see http://docs.neo4j.org/ for Neo4j Server installation instructions."
}

setup_arbiter_options() {
  is_arbiter() {
    compgen -G "${NEO4J_HOME}/lib/neo4j-server-enterprise-*.jar" >/dev/null && \
      [[ "$(echo "${dbms_mode:-}" | tr [:lower:] [:upper:])" == "ARBITER" ]]
  }

  if is_arbiter; then
    SHUTDOWN_TIMEOUT=20
    MIN_ALLOWED_OPEN_FILES=1
    MAIN_CLASS="org.neo4j.server.enterprise.StandaloneClusterClient"

    print_start_message() {
      echo "Started in ARBITER mode."
      echo "This instance is now joining the cluster."
    }
  else
    SHUTDOWN_TIMEOUT=120
    MIN_ALLOWED_OPEN_FILES=40000
    MAIN_CLASS="#{neo4j.mainClass}"

    print_start_message() {
      port="${org_neo4j_server_webserver_port:-7474}"
      NEO4J_SERVER_ADDRESS="${org_neo4j_server_webserver_address:-localhost}"

      echo "Started at http://${NEO4J_SERVER_ADDRESS}:${port} (pid ${NEO4J_PID})."

      if [[ "$(echo "${dbms_mode:-}" | tr [:lower:] [:upper:])" == "HA" ]]; then
        echo "This HA instance will be operational once it has joined the cluster."
      else
        echo "There may be a short delay until the server is ready."
      fi
    }
  fi
}

check_status() {
  if [ -e "${NEO4J_PIDFILE}" ] ; then
    NEO4J_PID=$(cat "${NEO4J_PIDFILE}")
    kill -0 "${NEO4J_PID}" 2>/dev/null || unset NEO4J_PID
  fi
}

detect_os() {
  if uname -s | grep -q Darwin; then
    DIST_OS="macosx"
  elif [[ -e /etc/gentoo-release ]]; then
    DIST_OS="gentoo"
  else
    DIST_OS="other"
  fi
}

# Runs before the server command, making sure that whatever should be in place is
# in place.
check_and_repair_env() {
  if [ ! -d "${NEO4J_LOG}" ]; then
    echo "${NEO4J_LOG} was missing, recreating..."
    mkdir -p "${NEO4J_LOG}"
  fi
}

check_limits() {
  detect_os
  if [ "${DIST_OS}" != "macosx" ] ; then
    ALLOWED_OPEN_FILES="$(ulimit -n)"

    if [ "${ALLOWED_OPEN_FILES}" -lt "${MIN_ALLOWED_OPEN_FILES}" ]; then
      echo "WARNING: Max ${ALLOWED_OPEN_FILES} open files allowed, minimum of ${MIN_ALLOWED_OPEN_FILES} recommended. See the Neo4j manual."
    fi
  fi
}

parse_config() {
  # - plain key-value pairs become environment variables
  # - keys have '.' chars changed to '_'
  # - keys of the form KEY.# (where # is a number) are concatenated into a single environment variable named KEY
  parse_line() {
    line="$1"
    if [[ "${line}" =~ ^([^#\s][^=]+)=(.+)$ ]]; then
      key="${BASH_REMATCH[1]//./_}"
      value="${BASH_REMATCH[2]}"
      if [[ "${key}" =~ ^(.*)_([0-9]+)$ ]]; then
        key="${BASH_REMATCH[1]}"
      fi
      if [[ "${!key:-}" ]]; then
        export ${key}="${!key} ${value}"
      else
        export ${key}="${value}"
      fi
    fi
  }

  for file in "neo4j-wrapper.conf" "neo4j.conf"; do
    path="${NEO4J_CONFIG}/${file}"
    if [ -e "${path}" ]; then
      while read line; do
        parse_line "${line}"
      done <"${path}"
    fi
  done
}

setup_paths() {
  [[ "${NEO4J_CONFIG:-}" ]] || NEO4J_CONFIG="${NEO4J_HOME}/conf"
  [[ "${NEO4J_LOG:-}" ]] || NEO4J_LOG="${NEO4J_HOME}/data/log"
  NEO4J_RUN="${NEO4J_HOME}/${dbms_directories_run:-run}"
  NEO4J_PIDFILE="${NEO4J_RUN}/neo4j.pid"
  CONSOLE_LOG="${NEO4J_LOG}/neo4j.log"
}

setup_java_opts() {
  JAVA_MEMORY_OPTS=""
  [[ "${dbms_memory_heap_initial_size:-}" ]] && JAVA_MEMORY_OPTS="${JAVA_MEMORY_OPTS} -Xms${dbms_memory_heap_initial_size}m"
  [[ "${dbms_memory_heap_max_size:-}" ]] && JAVA_MEMORY_OPTS="${JAVA_MEMORY_OPTS} -Xmx${dbms_memory_heap_max_size}m"

  JAVA_GC_LOGGING_OPTS=""
  if [ "${dbms_logs_gc_enabled:-}" = "true" ]; then
      [[ ${dbms_logs_gc_options:-} ]] || dbms_logs_gc_options="-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:+PrintTenuringDistribution -XX:+UseGCLogFileRotation"
      [[ ${dbms_logs_gc_rotation_size:-} ]] || dbms_logs_gc_rotation_size="20m"
      [[ ${dbms_logs_gc_rotation_keep_number:-} ]] || dbms_logs_gc_rotation_keep_number="5"

      JAVA_GC_LOGGING_OPTS="-Xloggc:${NEO4J_LOG}/gc.log ${dbms_logs_gc_options} -XX:NumberOfGCLogFiles=${dbms_logs_gc_rotation_keep_number} -XX:GCLogFileSize=${dbms_logs_gc_rotation_size}";
  fi

  JAVA_OPTS="-server"
  [[ "${JAVA_MEMORY_OPTS}" ]] && JAVA_OPTS="${JAVA_OPTS} ${JAVA_MEMORY_OPTS}"
  [[ "${dbms_jvm_additional:-}" ]] && JAVA_OPTS="${JAVA_OPTS} ${dbms_jvm_additional}"
  [[ "${JAVA_GC_LOGGING_OPTS}" ]] && JAVA_OPTS="${JAVA_OPTS} ${JAVA_GC_LOGGING_OPTS}"

  return 0
}

build_classpath() {
  CLASSPATH="${NEO4J_HOME}/lib/*:${NEO4J_HOME}/plugins/*"
}

do_console() {
  check_status
  if [[ "${NEO4J_PID:-}" ]] ; then
    echo "Neo4j is already running (pid ${NEO4J_PID})."
    exit 1
  fi

  echo "Starting Neo4j."

  check_limits
  build_classpath
  check_and_repair_env

  exec "${JAVA_CMD}" -cp "${CLASSPATH}" ${JAVA_OPTS} -Dfile.encoding=UTF-8 "${MAIN_CLASS}"
}

do_start() {
  check_status
  if [[ "${NEO4J_PID:-}" ]] ; then
    echo "Neo4j is already running (pid ${NEO4J_PID})."
    exit 0
  fi

  echo "Starting Neo4j."

  check_limits
  build_classpath
  check_and_repair_env

  nohup "${JAVA_CMD}" -cp "${CLASSPATH}" ${JAVA_OPTS} -Dfile.encoding=UTF-8 "${MAIN_CLASS}" \
    >>"${CONSOLE_LOG}" 2>&1 &
  echo "$!" >"${NEO4J_PIDFILE}"

  : "${NEO4J_START_WAIT:=5}"
  end="$((SECONDS+NEO4J_START_WAIT))"
  while true; do
    check_status

    if [[ "${NEO4J_PID:-}" ]]; then
      break
    fi

    if [[ "${SECONDS}" -ge "${end}" ]]; then
      echo "Unable to start. See ${CONSOLE_LOG} for details."
      rm "${NEO4J_PIDFILE}"
      return 1
    fi

    sleep 1
  done

  print_start_message
  echo "See ${CONSOLE_LOG} for current status."
}

do_stop() {
  check_status

  if [[ ! "${NEO4J_PID:-}" ]] ; then
    echo "Neo4j not running"
    [ -e "${NEO4J_PIDFILE}" ] && rm "${NEO4J_PIDFILE}"
    return 0
  else
    echo -n "Stopping Neo4j."
    end="$((SECONDS+SHUTDOWN_TIMEOUT))"
    while true; do
      check_status

      if [[ ! "${NEO4J_PID:-}" ]]; then
        echo " stopped"
        [ -e "${NEO4J_PIDFILE}" ] && rm "${NEO4J_PIDFILE}"
        return 0
      fi

      kill "${NEO4J_PID}" 2>/dev/null || true

      if [[ "${SECONDS}" -ge "${end}" ]]; then
        echo " failed to stop"
        echo "Neo4j (pid ${NEO4J_PID}) took more than ${SHUTDOWN_TIMEOUT} seconds to stop."
        echo "Please see ${CONSOLE_LOG} for details."
        return 1
      fi

      echo -n "."
      sleep 1
    done
  fi
}

do_status() {
  check_status
  if [[ ! "${NEO4J_PID:-}" ]] ; then
    echo "Neo4j is not running"
    exit 3
  else
    echo "Neo4j is running at pid ${NEO4J_PID}"
  fi
}

main() {
  setup_neo4jhome_and_script
  cd "${NEO4J_HOME}"
  setup_paths
  parse_config
  setup_java_opts
  check_java
  setup_arbiter_options

  case "${1:-}" in
    console)
      do_console
      ;;

    start)
      do_start
      ;;

    stop)
      do_stop
      ;;

    restart)
      do_stop
      do_start
      ;;

    status)
      do_status
      ;;

    *)
      echo "Usage: ${SCRIPT} { console | start | stop | restart | status }"
      ;;
  esac
}

main "$@"
