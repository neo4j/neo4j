<project default="debian">
    <macrodef name="package">

        <attribute name="name"/>

        <sequential>
            <!-- Unzip the standalone distributions -->
            <local name="source.distribution" />
            <property name="source.distribution" location="${project.build.directory}/neo4j-@{name}-${neo4j.version}-unix.tar.gz"/>

            <untar src="${source.distribution}"
                   dest="${project.build.outputDirectory}"
                   compression="gzip"/>

            <!-- Move distributions into build folders -->
            <move toDir="${project.build.outputDirectory}/@{name}/server">
                <fileset dir="${project.build.outputDirectory}/neo4j-@{name}-${neo4j.version}"
                         includes="**"/>
            </move>

            <!-- Make the Neo4j init scripts available to debuild -->
            <copy toDir="${project.build.outputDirectory}/@{name}/server">
                <fileset dir="${project.build.sourceDirectory}/../resources/common">
                    <include name="neo4j"/>
                </fileset>
            </copy>

            <!-- Make the default values file available to debuild -->
            <copy file="${project.build.sourceDirectory}/../resources/common/neo4j.default"
                  tofile="${project.build.outputDirectory}/@{name}/server/default/neo4j"/>

            <!-- Make the Neo4j wrapper scripts available to debuild -->
            <copy file="${project.build.sourceDirectory}/../resources/common/neo4j-script"
                  toFile="${project.build.outputDirectory}/@{name}/server/scripts/neo4j"/>
            <copy file="${project.build.sourceDirectory}/../resources/common/neo4j-script"
                  toFile="${project.build.outputDirectory}/@{name}/server/scripts/neo4j-admin"/>
            <copy file="${project.build.sourceDirectory}/../resources/common/neo4j-script"
                  toFile="${project.build.outputDirectory}/@{name}/server/scripts/neo4j-backup"/>
            <copy file="${project.build.sourceDirectory}/../resources/common/neo4j-script"
                  toFile="${project.build.outputDirectory}/@{name}/server/scripts/neo4j-import"/>
            <copy file="${project.build.sourceDirectory}/../resources/common/neo4j-script"
                  toFile="${project.build.outputDirectory}/@{name}/server/scripts/neo4j-shell"/>
            <copy file="${project.build.sourceDirectory}/../resources/common/neo4j-script"
                  toFile="${project.build.outputDirectory}/@{name}/server/scripts/cypher-shell"/>

            <!-- Set the directories to match the FHS. -->
            <replace file="${project.build.outputDirectory}/@{name}/server/conf/neo4j.conf"
                     token="#dbms.directories.data=data"
                     value="dbms.directories.data=/var/lib/neo4j/data"/>

            <replace file="${project.build.outputDirectory}/@{name}/server/conf/neo4j.conf"
                     token="#dbms.directories.plugins=plugins"
                     value="dbms.directories.plugins=/var/lib/neo4j/plugins"/>

            <replace file="${project.build.outputDirectory}/@{name}/server/conf/neo4j.conf"
                     token="#dbms.directories.import=import"
                     value="dbms.directories.import=/var/lib/neo4j/import"/>

            <concat destfile="${project.build.outputDirectory}/@{name}/server/conf/neo4j.conf"
                    append="true">

# Directory settings.
dbms.directories.logs=/var/log/neo4j
dbms.directories.run=/var/run/neo4j
dbms.directories.lib=/usr/share/neo4j/lib
dbms.directories.certificates=/var/lib/neo4j/certificates
            </concat>

            <chmod perm="700">
                <fileset dir="${project.build.outputDirectory}/@{name}">
                    <include name="**/server/bin/neo4j"/>
                    <include name="**/server/bin/neo4j-shell"/>
                    <include name="**/server/bin/neo4j-import"/>
                    <include name="**/server/bin/neo4j-backup"/>
                    <include name="**/server/bin/neo4j-admin"/>
                    <include name="**/server/bin/cypher-shell"/>

                    <include name="**/server/scripts/neo4j"/>
                    <include name="**/server/scripts/neo4j-shell"/>
                    <include name="**/server/scripts/neo4j-import"/>
                    <include name="**/server/scripts/neo4j-backup"/>
                    <include name="**/server/scripts/neo4j-admin"/>
                    <include name="**/server/scripts/cypher-shell"/>
                </fileset>
            </chmod>

            <!-- Copy manpages into build folder -->
            <copy toDir="${project.build.outputDirectory}/@{name}/manpages">
                <fileset dir="${project.build.outputDirectory}/common/manpages" includes="**"/>
            </copy>

            <!-- Run installer projects -->
            <exec executable="debuild"
                  dir="${project.build.outputDirectory}/@{name}"
                  failonerror="true" >
                <arg line="-us"/>
                <arg line="-uc"/>
                <arg line="-B"/>
            </exec>

        </sequential>
    </macrodef>

    <target name="generate">
        <package name="community"/>
        <package name="enterprise"/>
    </target>

    <target name="publish_to_target" depends="generate">
        <!-- Copy installers from classes/ to target/ -->
        <copy
                file="${project.build.outputDirectory}/neo4j_${neo4j.version.debian_compliant}_all.deb"
                toFile="${project.build.directory}/neo4j_${neo4j.version.debian_compliant}_all.deb"/>
        <copy
                file="${project.build.outputDirectory}/neo4j-enterprise_${neo4j.version.debian_compliant}_all.deb"
                toFile="${project.build.directory}/neo4j-enterprise_${neo4j.version.debian_compliant}_all.deb"/>
    </target>

    <target name="debian" depends="publish_to_target"/>
</project>
