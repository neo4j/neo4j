[[query-tuning]]
= Query Tuning

Neo4j works very hard to execute queries as fast as possible.

However, when optimizing for maximum query execution performance, it may be helpful to rephrase queries using knowledge about the domain and the application.

The overall goal of manual query performance optimization is to ensure that only necessary data is retrieved from the graph.
At least data should get filtered out as early as possible in order to reduce the amount of work that has to be done at later stages of query execution.
This also goes for what gets returned: avoid returning whole nodes and relationships -- instead, pick the data you need and return only that.
You should also make sure to set an upper limit on variable length patterns, so they don't cover larger portions of the dataset than needed.

Each Cypher query gets optimized and transformed into an execution plan by the Cypher execution engine.
To minimize the resources used for this, make sure to use parameters instead of literals when possible.
This allows Cypher to re-use your queries instead of having to parse and build new execution plans.

To read more about the execution plan operators mentioned in this chapter, see <<execution-plans>>.

[[how-are-queries-executed]]
== How are queries executed?

Each query is turned into an execution plan by something called the _execution planner_.
The execution plan tells Neo4j which operations to perform when executing the query.
Two different execution planning strategies are included in Neo4j:

Rule::
This planner has rules that are used to produce execution plans.
The planner considers available indexes, but does not use statistical information to guide the query compilation.

Cost::
This planner uses the statistics service in Neo4j to assign cost to alternative plans and picks the cheapest one.
While this should lead to superior execution plans in most cases, it is still under development.

By default, Neo4j 2.2 will use the cost planner for some queries, but not all.
You can force it to use a specific planner by using the `query.planner.version` configuration setting (see <<config_dbms.cypher.planner>>), or by prepending your query with `CYPHER planner=cost` or `CYPHER planner=rule`.
Neo4j might still not use the planner you selected -- not all queries are solvable by the cost planner at this point. Note that using `PLANNER COST` or `PLANNER RULE` in order to switch between planners has been deprecated and will stop working in future versions.

You can see which planner was used by looking at the execution plan.

[NOTE]
When Cypher is building execution plans, it looks at the schema to see if it can find indexes it can use.
These index decisions are only valid until the schema changes, so adding or removing indexes leads to the execution plan cache being flushed.

[[how-do-i-profile-a-query]]
== How do I profile a query?

There are two options to choose from when you want to analyze a query by looking at its execution plan:

`EXPLAIN`::
If you want to see the execution plan but not run the statement, prepend your Cypher statement with `EXPLAIN`.
The statement will always return an empty result and make no changes to the database.

`PROFILE`::
If you want to run the statement and see which operators are doing most of the work, use `PROFILE`.
This will run your statement and keep track of how many rows pass through each operator, and how much each operator needs to interact with the storage layer to retrieve the necessary data.
Please note that _profiling your query uses more resources,_ so you should not profile unless you are actively working on a query.

See <<execution-plans>> for a detailed explanation of each of the operators contained in an execution plan.

[TIP]
Being explicit about what types and labels you expect relationships and nodes to have in your query helps Neo4j use the best possible statistical information, which leads to better execution plans.
This means that when you know that a relationship can only be of a certain type, you should add that to the query.
The same goes for labels, where declaring labels on both the start and end nodes of a relationship helps Neo4j find the best way to execute the statement.

:leveloffset: 2


include::../parsed-graphgists/query-tuning/basic-query-tuning-example.asciidoc[]
