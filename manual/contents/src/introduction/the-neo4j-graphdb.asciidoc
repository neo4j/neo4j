[[graphdb-neo4j]]
= The Neo4j Graph Database

A graph database stores data in a graph, the most generic of data structures, capable of elegantly representing any kind of data in a highly accessible way.

For terminology around graph databases, see <<terminology>>.

Here's an example graph which we will approach step by step in the following sections:

["dot", "graphdb-simple-labels.svg", "neoviz"]
----
N2 [
label = "{Person|name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N3 [
label = "ACTED_IN\nroles = \[\'Forrest\'\]\l"
]
N3 [
label = "{Movie|title = \'Forrest Gump\'\lreleased = 1994\l}"
]
N4 -> N3 [
label = "DIRECTED\n"
]
N4 [
label = "{Person|name = \'Robert Zemeckis\'\lborn = 1951\l}"
]
----

[[graphdb-neo4j-nodes]]
== Nodes ==

[abstract]
A graph records data in nodes and relationships.
Both can have properties.
This is sometimes referred to as the _Property Graph Model_.

The fundamental units that form a graph are nodes and relationships.
In Neo4j, both nodes and relationships can contain <<graphdb-neo4j-properties,properties>>.

Nodes are often used to represent _entities,_ but depending on the domain relationships may be used for that purpose as well.

Apart from properties and relationships, nodes can also be <<graphdb-neo4j-labels,labeled>> with zero or more labels.

The simplest possible graph is a single Node.
A Node can have zero or more named values referred to as _properties._
Let's start out with one node that has a single property named `title`:

["dot", "graphdb-simple-node.svg", "neoviz"]
----
N0 [
label = "{title = \'Forrest Gump\'}"
]
----

The next step is to have multiple nodes.
Let's add two more nodes and one more property on the node in the previous example:

["dot", "graphdb-simple-nodes.svg", "neoviz"]
----
N2 [
label = "{name = \'Tom Hanks\'\lborn = 1956\l}"
]
N3 [
label = "{title = \'Forrest Gump\'\lreleased = 1994\l}"
]
N4 [
label = "{name = \'Robert Zemeckis\'\lborn = 1951\l}"
]
----

[[graphdb-neo4j-relationships]]
== Relationships ==

[abstract]
Relationships organize the nodes by connecting them.
A relationship connects two nodes -- a start node and an end node.
Just like nodes, relationships can have properties.

Relationships between nodes are a key part of a graph database.
They allow for finding related data.
Just like nodes, relationships can have <<graphdb-neo4j-properties,properties>>.

A relationship connects two nodes, and is guaranteed to have valid start and end nodes.

Relationships organize nodes into arbitrary structures, allowing a graph to resemble a list, a tree, a map, or a compound entity -- any of which can be combined into yet more complex, richly inter-connected structures.

Our example graph will make a lot more sense once we add relationships to it:

["dot", "graphdb-simple-rels.svg", "neoviz"]
----
N2 [
label = "{name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N3 [
label = "ACTED_IN\nroles = \[\'Forrest\'\]\l"
]
N3 [
label = "{title = \'Forrest Gump\'\lreleased = 1994\l}"
]
N4 -> N3 [
label = "DIRECTED\n"
]
N4 [
label = "{name = \'Robert Zemeckis\'\lborn = 1951\l}"
]
----

Our example uses `ACTED_IN` and `DIRECTED` as relationship types.
The `roles` property on the `ACTED_IN` relationship has an array value with a single item in it.

Below is an `ACTED_IN` relationship, with the `Tom Hanks` node as _start node_ and `Forrest Gump` as _end node_.

["dot", "graphdb-nodes-and-rel.svg", "neoviz"]
----
graph [rankdir="LR"]
N2 [
label = "{name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N3 [
label = "ACTED_IN\nroles = \[\'Forrest\'\]\l"
]
N3 [
label = "{title = \'Forrest Gump\'\lreleased = 1994\l}"
]
----

You could also say that the `Tom Hanks` node has an _outgoing_ relationship, while the `Forrest Gump` node has an _incoming_ relationship.

[NOTE]
.Relationships are equally well traversed in either direction.
====
This means that there is no need to add duplicate relationships in the opposite direction (with regard to traversal or performance).
====

While relationships always have a direction, you can ignore the direction where it is not useful in your application.

Note that a node can have relationships to itself as well:

["dot", "graphdb-nodes-and-rel-self.svg", "neoviz"]
----
N2 [
label = "{name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N2 [
label = "KNOWS"
]
----

The example above would mean that `Tom Hanks` `KNOWS` himself.

To further enhance graph traversal all relationships have a relationship type.

Let's have a look at what can be found by simply following the relationships of a node in our example graph:

["dot", "graphdb-simple-rels.svg", "neoviz"]
----
N2 [
label = "{name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N3 [
label = "ACTED_IN\nroles = \[\'Forrest\'\]\l"
]
N3 [
label = "{title = \'Forrest Gump\'\lreleased = 1994\l}"
]
N4 -> N3 [
label = "DIRECTED\n"
]
N4 [
label = "{name = \'Robert Zemeckis\'\lborn = 1951\l}"
]
----

.Using relationship direction and type
[options="header", cols="<3,<2,<2m,<2"]
|========================================================
| What we want to know | Start from | Relationship type | Direction
| get actors in movie | movie node | ACTED_IN | incoming
| get movies with actor | person node | ACTED_IN | outgoing
| get directors of movie | movie node | DIRECTED | incoming
| get movies directed by | person node | DIRECTED | outgoing
|========================================================

[[graphdb-neo4j-properties]]
== Properties ==

[abstract]
Both nodes and relationships can have properties.

Properties are named values where the name is a string.
The supported property values are:

* Numeric values,
* String values,
* Boolean values,
* Collections of any other type of value.

[NOTE]
.`NULL` is not a valid property value.
====
++NULL++s can instead be modeled by the absence of a key.
====

For further details on supported property values, see <<property-values-detailed>>.

[[graphdb-neo4j-labels]]
== Labels ==

[abstract]
Labels assign roles or types to nodes.

A label is a named graph construct that is used to group nodes into sets; all nodes labeled with the same label belongs to the same set.
Many database queries can work with these sets instead of the whole graph, making queries easier to write and more efficient to execute.
A node may be labeled with any number of labels, including none, making labels an optional addition to the graph.

Labels are used when defining constraints and adding indexes for properties (see <<graphdb-neo4j-schema>>).

An example would be a label named `User` that you label all your nodes representing users with.
With that in place, you can ask Neo4j to perform operations only on your user nodes, such as finding all users with a given name.

However, you can use labels for much more.
For instance, since labels can be added and removed during runtime, they can be used to mark temporary states for your nodes.
You might create an `Offline` label for phones that are offline, a `Happy` label for happy pets, and so on.

In our example, we'll add `Person` and `Movie` labels to our graph:

["dot", "graphdb-simple-labels.svg", "neoviz"]
----
N2 [
label = "{Person|name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N3 [
label = "ACTED_IN\nroles = \[\'Forrest\'\]\l"
]
N3 [
label = "{Movie|title = \'Forrest Gump\'\lreleased = 1994\l}"
]
N4 -> N3 [
label = "DIRECTED\n"
]
N4 [
label = "{Person|name = \'Robert Zemeckis\'\lborn = 1951\l}"
]
----

A node can have multiple labels, let's add an `Actor` label to the `Tom Hanks` node.

["dot", "graphdb-simple-labels-multi.svg", "neoviz"]
----
N2 [
label = "{Person\nActor|name = \'Tom Hanks\'\lborn = 1956\l}"
]
----

=== Label names ===

Any non-empty Unicode string can be used as a label name.
In Cypher, you may need to use the backtick (++`++) syntax to avoid clashes with Cypher identifier rules or to allow non-alphanumeric characters in a label.
By convention, labels are written with CamelCase notation, with the first letter in upper case.
For instance, +User+ or +CarOwner+.

Labels have an id space of an int, meaning the maximum number of labels the database can contain is roughly 2 billion.

[[graphdb-neo4j-traversal]]
== Traversal ==

[abstract]
A traversal navigates through a graph to find paths.

A traversal is how you query a graph, navigating from starting nodes to related nodes, finding answers to questions like ``what music do my friends like that I don't yet own,'' or ``if this power supply goes down, what web services are affected?''

Traversing a graph means visiting its nodes, following relationships according to some rules.
In most cases only a subgraph is visited, as you already know where in the graph the interesting nodes and relationships are found.

Cypher provides a declarative way to query the graph powered by traversals and other techniques.
See <<cypher-query-lang>> for more information.

When writing server plugins or using Neo4j embedded, Neo4j provides a callback based traversal API which lets you specify the traversal rules.
At a basic level there's a choice between traversing breadth- or depth-first.

If we want to find out which movies Tom Hanks acted in according to our tiny example database the traversal would start from the `Tom Hanks` node, follow any `ACTED_IN` relationships connected to the node, and end up with `Forrest Gump` as the result (see the dashed lines):

["dot", "graphdb-traversal.svg", "neoviz"]
----
N2 [
label = "{Person|name = \'Tom Hanks\'\lborn = 1956\l}"
style = "dashed"
]
N2 -> N3 [
label = "ACTED_IN\nroles = \[\'Forrest\'\]\l"
style = "dashed"
]
N3 [
label = "{Movie|title = \'Forrest Gump\'\lreleased = 1994\l}"
style = "dashed"
]
N4 -> N3 [
label = "DIRECTED\n"
]
N4 [
label = "{Person|name = \'Robert Zemeckis\'\lborn = 1951\l}"
]
----

[[graphdb-neo4j-paths]]
== Paths ==

[abstract]
A path is one or more nodes with connecting relationships, typically retrieved as a query or traversal result.

In the previous example, the traversal result could be returned as a path:

["dot", "graphdb-path.svg", "neoviz"]
----
graph [rankdir="LR"]
N2 [
label = "{Person|name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N3 [
label = "ACTED_IN\nroles = \[\'Forrest\'\]\l"
]
N3 [
label = "{Movie|title = \'Forrest Gump\'\lreleased = 1994\l}"
]
----

The path above has length one.

The shortest possible path has length zero -- that is it contains only a single node and no relationships -- and can look like this:

["dot", "graphdb-path-zero.svg", "neoviz"]
----
N2 [
label = "{Person|name = \'Tom Hanks\'\lborn = 1956\l}"
]
----

This path has length one:

["dot", "graphdb-path-example-loop.svg", "neoviz"]
----
N2 [
label = "{Person|name = \'Tom Hanks\'\lborn = 1956\l}"
]
N2 -> N2 [
label = "KNOWS"
]
----

[[graphdb-neo4j-schema]]
== Schema ==

[abstract]
Neo4j is a schema-optional graph database.

You can use Neo4j without any schema.
Optionally you can introduce it in order to gain performance or modeling benefits.
This allows a way of working where the schema does not get in your way until you are at a stage where you want to reap the benefits of having one.

[NOTE]
Schema commands can only be applied on the master machine in a Neo4j cluster (see <<ha>>).
If you apply them on a slave you will receive a `Neo.ClientError.Transaction.InvalidType` error code (see <<status-codes>>).

[[graphdb-neo4j-schema-indexes]]
=== Indexes ===

[abstract]
Performance is gained by creating indexes, which improve the speed of looking up nodes in the database.

NOTE: This feature was introduced in Neo4j 2.0, and is not the same as the legacy indexes (see <<indexing>>).

Once you’ve specified which properties to index, Neo4j will make sure your indexes are kept up to date as your graph evolves.
Any operation that looks up nodes by the newly indexed properties will see a significant performance boost.

Indexes in Neo4j are _eventually available_.
That means that when you first create an index the operation returns immediately.
The index is _populating_ in the background and so is not immediately available for querying.
When the index has been fully populated it will eventually come _online_.
That means that it is now ready to be used in queries.

If something should go wrong with the index, it can end up in a *failed* state.
When it is failed, it will not be used to speed up queries.
To rebuild it, you can drop and recreate the index.
Look at logs for clues about the failure.

You can track the status of your index by asking for the index state through the API you are using.
Note, however, that this is not yet possible through Cypher.

How to use indexes through the different APIs:

* Cypher: <<query-schema-index>>
* REST API: <<rest-api-schema-indexes>>
* Listing Indexes via Shell: <<shell-listing-indexes-and-constraints>>
* Java Core API: <<tutorials-java-embedded-new-index>>

[[graphdb-neo4j-schema-constraints]]
=== Constraints ===

NOTE: This feature was introduced in Neo4j 2.0.

Neo4j can help you keep your data clean.
It does so using constraints, that allow you to specify the rules for what your data should look like.
Any changes that break these rules will be denied.

In this version, unique constraints is the only available constraint type.

How to use constraints through the different APIs:

* Cypher: <<query-constraints>>
* REST API: <<rest-api-schema-constraints>>
* Listing Constraints via Shell: <<shell-listing-indexes-and-constraints>>

