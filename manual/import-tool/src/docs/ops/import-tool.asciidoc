[[import-tool]]
= Import tool

The import tool is used to create a new Neo4j database from data in CSV files.

This chapter explains how to use the tool, format the input data and concludes with an example bringing everything together.

These are some things you'll need to keep in mind when creating your input files:

* Fields are comma separated.
* All files must use the same delimiter.
* Multiple data sources can be used for both nodes and relationships.
* A data source can optionally be provided using multiple files.
* A header which provides information on the data fields must be on the first row of each data source.
* Fields without corresponding information in the header will not be read.
* UTF-8 encoding is used.

[TIP]
Indexes are not created during the import.
Instead you'll need to add indexes afterwards (see <<graphdb-neo4j-schema-indexes>>).

[NOTE]
--
Data cannot be imported into an existing database using this tool.

* If you want to load small to medium sized CSV files see <<query-load-csv>>.
* If you want to bulk import into an existing database see <<batchinsert>>.
--

[[import-tool-header-format]]
== CSV file header format

The header row of each data source specifies how the fields should be interpreted.
The same delimiter is used for the header row as for the rest of the data.

The header contains information for each field, with the format: `<name>:<field_type>`.
The `<name>` is used as the property key for values, and ignored in other cases.
The following `<field_type>` settings can be used for both nodes and relationships:

Property value:: Use one of `int`, `long`, `float`, `double`, `boolean`, `byte`, `short`, `char`, `string` to designate the data type.
  If no data type is given, this defaults to `string`.
  To define an array type, append `[]` to the type.
  By default, array values are separated by `;`.
  A different delimiter can be specified with `--array-delimiter`.
IGNORE::
  Ignore this field completely.

See below for the specifics of node and relationship data source headers.

[[import-tool-header-format-nodes]]
=== Nodes

The following field types do additionally apply to node data sources:

ID::
  Each node must have a unique id which is used during the import.
  The ids are used to find the correct nodes when creating relationships.
  Note that the id has to be unique across all nodes in the import, even nodes with different labels.
LABEL::
  Read one or more labels from this field.
  Like array values, multiple labels are separated by `;`, or by the character specified with `--array-delimiter`.

[[import-tool-header-format-rels]]
=== Relationships

For relationship data sources, there are three mandatory fields:

TYPE::
  The relationship type to use for the relationship.
START_ID::
  The id of the start node of the relationship to create.
END_ID::
  The id of the end node of the relationship to create.

[[import-tool-id-spaces]]
=== ID spaces

The import tool assumes that node identifiers are unique across node files.
If this isn't the case then we can define an `id space`.
Id spaces are defined in the `ID` field of node files.

For example, to specify the `Person` id space we would use the field type `ID(Person)` in our persons node file.
We also need to reference that id space in our relationships file i.e. `START_ID(Person)` or `END_ID(Person)`.

[[import-tool-usage]]
== Command line usage

=== Linux

Under Unix/Linux/OSX, the command is named `neo4j-admin import`. Depending on the installation type, the tool is either available globally, or used by executing `./bin/neo4j-admin import --mode=csv` from inside the installation directory.

=== Windows

Under Windows, used by executing `bin\neo4j-admin import` from inside the installation directory.

[[import-tool-options]]
=== Options

include::options.adoc[]

[[import-tool-output-and-statistics]]
=== Output and statistics

While an import is running through its different stages, some statistics and figures are printed in the console.
The general interpretation of that output is to look at the horizontal line, which is divided up into sections, each section representing one type of work going on in parallel with the other sections.
The wider a section is, the more time is spent there relative to the other sections, the widest being the bottleneck, also marked with `*`.
If a section has a double line, instead of just a single line, it means that multiple threads are executing the work in that section.
To the far right a number is displayed telling how many entities (nodes or relationships) have been processed by that stage.

As an example:

`[*>:20,25 MB/s------------------|PREPARE(3)====================|RELATIONSHIP(2)===============] 16M`

Would be interpreted as:

* `>` data being read, and perhaps parsed, at `20,25 MB/s`, data that is being passed on to ...
* `PREPARE` preparing the data for ...
* `RELATIONSHIP` creating actual relationship records and ...
* `v` writing the relationships to the store. This step isn't visible in this example, because it's so cheap compared to the other sections.

Observing the section sizes can give hints about where performance can be improved.
In the example above, the bottleneck is the data read section (marked with `>`), which might indicate that the disk is being slow, or is poorly handling simultaneous read and write operations (since the last section often revolves around writing to disk).

[[import-tool-examples]]
== Import tool examples

Let's look at a few examples.
We'll use a data set containing movies, actors and roles.

[TIP]
While you'll usually want to store your node identifier as a property on the node for looking it up later, it's not mandatory.
If you don't want the identifier to be persisted then don't specify a property name in the `:ID` field.

[[import-tool-basic-example]]
=== Basic example

First we'll look at the movies.
Each movie has an id, which is used to refer to it in other data sources, a title and a year
Along with these properties we'll also add the node labels `Movie` and `Sequel`.

By default the import tool expects CSV files to be comma delimited.

.movies.csv
[source]
----
include::movies.csv[]
----

Next up are the actors.
They have an id - in this case a shorthand - and a name and all have the Actor label.

.actors.csv
[source]
----
include::actors.csv[]
----

Finally we have the roles that an actor plays in a movie which will be represented by relationships in the database.
In order to create a relationship between nodes we refer to the ids used in `actors.csv` and `movies.csv` in the `START_ID` and `END_ID` fields.
We also need to provide a relationship type (in this case `ACTED_IN`) in the `:TYPE` field.

.roles.csv
[source]
----
include::roles.csv[]
----

With all data in place, we execute the following command:

[source]
----
include::example-command.adoc[]
----

We're now ready to start up a database from the target directory.

Once we've got the database up and running we can add appropriate indexes. (see <<cypherdoc-labels-constraints-and-indexes>>.)

[TIP]
It is possible to import only nodes using the import tool - just don't specify a relationships file when calling
`neo4j-admin import`.
If you do this you'll need to create relationships later by another method - the import tool only works for initial graph population.

[[import-tool-separate-headers-example]]
=== Using separate header files

When dealing with very large CSV files it's more convenient to have the header in a separate file.
This makes it easier to edit the header as you avoid having to open a huge data file just to change it.

[TIP]
+import-tool+ can also process single file compressed archives.
e.g. `--nodes nodes.csv.gz` or `--relationships rels.zip`

We'll use the same data as in the previous example but put the headers in separate files.

.movies3-header.csv
[source]
----
include::movies3-header.csv[]
----

.movies3.csv
[source]
----
include::movies3.csv[]
----

.actors3-header.csv
[source]
----
include::actors3-header.csv[]
----
.actors3.csv
[source]
----
include::actors3.csv[]
----

.roles3-header.csv
[source]
----
include::roles3-header.csv[]
----

.roles3.csv
[source]
----
include::roles3.csv[]
----

Note how the file groups are enclosed in quotation marks in the command:

[source]
----
include::separate-header-example-command.adoc[]
----

[[import-tool-multiple-input-files-example]]
=== Multiple input files

As well as using a separate header file you can also provide multiple nodes or relationships files.
This may be useful when processing the output from a Hadoop pipeline for example.
Files within such an input group can be specified with multiple match strings, delimited by +,+, where each match string can be either: _the exact file name_ or _a regular expression matching one or more files_.
Multiple matching files will be sorted according to their characters _and_ their natural number sort order for file names containing numbers.

.movies4-header.csv
[source]
----
include::movies4-header.csv[]
----

.movies4-part1.csv
[source]
----
include::movies4-part1.csv[]
----

.movies4-part2.csv
[source]
----
include::movies4-part2.csv[]
----

.actors4-header.csv
[source]
----
include::actors4-header.csv[]
----

.actors4-part1.csv
[source]
----
include::actors4-part1.csv[]
----

.actors4-part2.csv
[source]
----
include::actors4-part2.csv[]
----

.roles4-header.csv
[source]
----
include::roles4-header.csv[]
----

.roles4-part1.csv
[source]
----
include::roles4-part1.csv[]
----

.roles4-part2.csv
[source]
----
include::roles4-part2.csv[]
----

The call to `neo4j-admin import` would look like this:

[source]
----
include::multiple-input-files.adoc[]
----

[[import-tool-types-labels]]
=== Types and labels

[[import-tool-same-label-for-every-node-example]]
==== Using the same label for every node

If you want to use the same node label(s) for every node in your nodes file you can do this by specifying the
appropriate value as an option to `neo4j-admin import`.
In this example we'll put the label `Movie` on every node specified in `movies5.csv`:

.movies5.csv
[source]
----
include::movies5.csv[]
----

[TIP]
There's then no need to specify the `:LABEL` field in the node file if you pass it as a command line option.
If you do then both the label provided in the file and the one provided on the command line will be added to the node.

In this case, we'll put the labels `Movie` and `Sequel` on the nodes specified in `sequels5.csv`.

.sequels5.csv
[source]
----
include::sequels5.csv[]
----

.actors5.csv
[source]
----
include::actors5.csv[]
----

.roles5.csv
[source]
----
include::roles5.csv[]
----

The call to `neo4j-admin import` would look like this:

[source]
----
include::same-node-label-everywhere.adoc[]
----

[[import-tool-same-relationship-type-for-every-relationship-example]]
==== Using the same relationship type for every relationship

If you want to use the same relationship type for every relationship in your relationships file you can do this by
specifying the appropriate value as an option to `neo4j-admin import`.
In this example we'll put the relationship type `ACTED_IN` on every relationship specified in `roles6.csv`:

.movies6.csv
[source]
----
include::movies6.csv[]
----

.actors6.csv
[source]
----
include::actors6.csv[]
----

.roles6.csv
[source]
----
include::roles6.csv[]
----

[TIP]
If you provide a relationship type on the command line and in the relationships file the one in the file will be
applied.

The call to `neo4j-admin import` would look like this:

[source]
----
include::same-relationship-type-everywhere.adoc[]
----

[[import-tool-property-types-example]]
=== Property types

The type for properties specified in nodes and relationships files is defined in the header row.
(see <<import-tool-header-format>>)

The following example creates a small graph containing one actor and one movie connected by an `ACTED_IN` relationship.
There is a `roles` property on the relationship which contains an array of the characters played by the actor in a movie.

.movies7.csv
[source]
----
include::movies7.csv[]
----

.actors7.csv
[source]
----
include::actors7.csv[]
----

.roles7.csv
[source]
----
include::roles7.csv[]
----

The arguments to `neo4j-admin import` would be the following:

[source]
----
include::property-types.adoc[]
----

[[import-tool-id-handling]]
=== ID handling

Each node processed by `neo4j-admin import` must provide a unique id.
We use this id to find the correct nodes when creating relationships.

[[import-tool-sequential-identifiers-example]]
==== Working with sequential or auto incrementing identifiers

The import tool makes the assumption that identifiers are unique across node files.
This may not be the case for data sets which use sequential, auto incremented or otherwise colliding identifiers.
Those data sets can define id spaces where identifiers are unique within their respective id space.

For example if movies and people both use sequential identifiers then we would define `Movie` and `Actor` id spaces.

.movies8.csv
[source]
----
include::movies8.csv[]
----

.actors8.csv
[source]
----
include::actors8.csv[]
----

We also need to reference the appropriate id space in our relationships file so it knows which nodes to connect
together:

.roles8.csv
[source]
----
include::roles8.csv[]
----

The command line arguments would remain the same as before:

[source]
----
include::id-spaces.adoc[]
----

[[import-tool-bad-input-data-example]]
=== Bad input data

The import tool has a threshold of how many bad entities (nodes/relationships) to tolerate and skip before failing the import.
By default `1000` bad entities are tolerated.

There are different types of bad input, which we will look into.

[[import-tool-rels-to-missing-nodes-example]]
==== Relationships referring to missing nodes

Relationships that refer to missing node ids, either for `:START_ID` or `:END_ID` are considered bad relationships.

In the following example there is a missing `emil` node referenced in the roles file.

.movies9.csv
[source]
----
include::movies9.csv[]
----

.actors9.csv
[source]
----
include::actors9.csv[]
----

.roles9.csv
[source]
----
include::roles9.csv[]
----

The command line arguments would remain the same as before:

[source]
----
include::bad-relationships-default.adoc[]
----

Since there was only one bad relationship the import process will complete successfully and a `not-imported.bad` file will be created and populated with the bad relationships.

.not-imported.bad
[source]
----
include::bad-relationships-default-not-imported.bad.adoc[]
----

[[import-tool-multiple-nodes-same-id-example]]
==== Multiple nodes with same id within same id space

Nodes that specify `:ID` which has already been specified within the id space are considered bad nodes.

In the following example there is a node id that is specified twice within the same id space.

.actors10.csv
[source]
----
include::actors10.csv[]
----

[source]
----
include::bad-duplicate-nodes-default.adoc[]
----

Since there was only one bad node the import process will complete successfully and a `not-imported.bad` file will be created and populated with the bad node.

.not-imported.bad
[source]
----
include::bad-duplicate-nodes-default-not-imported.bad.adoc[]
----
