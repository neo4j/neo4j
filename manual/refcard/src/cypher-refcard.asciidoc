= Neo4j Cypher Refcard {neo4j-version}
:sources: ../docs/neo4j-cypher-refcard-tests-docs-jar/dev/ql/refcard
:docs-home: http://neo4j.com/docs

*Cypher is the declarative query language for Neo4j, the worldâ€™s leading graph database.*


Key principles and capabilities of Cypher are as follows:

* Cypher matches patterns of nodes and relationship in the graph, to extract information or modify the data.
* Cypher has the concept of identifiers which denote named, bound elements and parameters.
* Cypher can create, update, and remove nodes, relationships, labels, and properties.
* Cypher manages indexes and constraints.

++++
<div class="paragraph"><p>You can try Cypher snippets live in the Neo4j Console at
<a href="http://console.neo4j.org" target="_blank">console.neo4j.org</a>
or read the full Cypher documentation in the
<a href="../" target="_blank">Neo4j Manual</a>.
For live graph models using Cypher check out <a href="http://gist.neo4j.org" target="_blank">GraphGist</a>.</p></div>
++++

The Cypher Refcard is also link:{docs-home}/pdf/neo4j-cypher-refcard-{neo4j-version}.pdf[available in PDF format].

Note: `{value}` denotes either literals, for ad hoc Cypher queries; or parameters, which is the best practice for applications.
Neo4j properties can be strings, numbers, booleans or arrays thereof.
Cypher also supports maps and lists.


== Syntax

.Read Query Structure
["refcard", cardcss="read c2-2 c3-2 c4-2 c5-2"]
----
[MATCH WHERE]
[OPTIONAL MATCH WHERE]
[WITH [ORDER BY] [SKIP] [LIMIT]]
RETURN [ORDER BY] [SKIP] [LIMIT]
----

//include::{sources}/query-structure.asciidoc[]

include::{sources}/match.asciidoc[]

include::{sources}/where.asciidoc[]

include::{sources}/return.asciidoc[]

include::{sources}/with.asciidoc[]

include::{sources}/union.asciidoc[]

.Write-Only Query Structure
["refcard", cardcss="write c2-2 c4-3 c5-4 c6-1"]
----
(CREATE [UNIQUE] | MERGE)*
[SET|DELETE|REMOVE|FOREACH]*
[RETURN [ORDER BY] [SKIP] [LIMIT]]
----

.Read-Write Query Structure
["refcard", cardcss="write c2-2 c4-3 c5-4 c6-1"]
----
[MATCH WHERE]
[OPTIONAL MATCH WHERE]
[WITH [ORDER BY] [SKIP] [LIMIT]]
(CREATE [UNIQUE] | MERGE)*
[SET|DELETE|REMOVE|FOREACH]*
[RETURN [ORDER BY] [SKIP] [LIMIT]]
----

include::{sources}/create.asciidoc[]

include::{sources}/merge.asciidoc[]

include::{sources}/set.asciidoc[]

include::{sources}/delete.asciidoc[]

include::{sources}/remove.asciidoc[]

include::{sources}/foreach.asciidoc[]

include::{sources}/call.asciidoc[]

include::{sources}/index.asciidoc[]

include::{sources}/constraint.asciidoc[]

include::{sources}/import.asciidoc[]

++++
<div class="col cardgeneral c3-3 c6-3"><div class="blk">
++++

[options="header", cols=",m"]
|===
2+| link:../query-operators.html[Operators]
| Mathematical       | `+`, `-`, `*`, `/`, `%`, `^`
| Comparison         | `=`, `<>`, `<`, `>`, `<=`, `>=`
| Boolean            | `AND`, `OR`, `XOR`, `NOT`
| String             | `+`
| List               | `+`, `IN`, `[x]`, `[x .. y]`
| Regular Expression | `=~`
| String matching    | `STARTS WITH`, `ENDS WITH`, `CONTAINS`
|===

++++
</div></div>
++++

++++
<div class="col cardgeneral c3-3 c4-3 c5-3 c6-3"><div class="blk">
++++

[options="header", cols="a"]
|===
| link:../cypher-working-with-null.html[NULL]
|
* `NULL` is used to represent missing/undefined values.
* `NULL` is not equal to `NULL`.
  Not knowing two values does not imply that they are the same value.
  So the expression `NULL = NULL` yields `NULL` and not `TRUE`.
  To check if an expression is `NULL`, use `IS NULL`.
* Arithmetic expressions, comparisons and function calls (except +coalesce+) will return `NULL` if any argument is `NULL`.
* An attempt to access a missing element in a list or a property that doesn't exist yields `NULL`.
* In `OPTIONAL MATCH` clauses, `NULL`s will be used for missing parts of the pattern.
|===

++++
</div></div>
++++

include::{sources}/patterns.asciidoc[]

include::{sources}/labels.asciidoc[]

include::{sources}/lists.asciidoc[]

include::{sources}/maps.asciidoc[]

include::{sources}/relationship-functions.asciidoc[]

include::{sources}/predicates.asciidoc[]

include::{sources}/list-predicates.asciidoc[]

include::{sources}/functions.asciidoc[]

include::{sources}/path-functions.asciidoc[]

include::{sources}/list-expressions.asciidoc[]

include::{sources}/mathematical-functions.asciidoc[]

include::{sources}/string-functions.asciidoc[]

include::{sources}/aggregation.asciidoc[]

include::{sources}/case.asciidoc[]

include::{sources}/start.asciidoc[]

include::{sources}/create-unique.asciidoc[]


++++
<div class="col cardperformance c2-2 c3-1 c4-4 c5-3 c6-6"><div class="blk">
++++

[options="header", cols="a"]
|===
| link:../query-tuning.html[Performance]
|
* Use parameters instead of literals when possible.
  This allows Cypher to re-use your queries instead of having to parse and build new execution plans.
* Always set an upper limit for your variable length patterns.
  It's easy to have a query go wild and touch all nodes in a graph by mistake.
* Return only the data you need.
  Avoid returning whole nodes and relationships -- instead, pick the data you need and return only that.
* Use `PROFILE` / `EXPLAIN` to analyze the performance of your queries.
  See link:../query-tuning.html[Query Tuning] for more information.
|===

++++
</div></div>
++++


