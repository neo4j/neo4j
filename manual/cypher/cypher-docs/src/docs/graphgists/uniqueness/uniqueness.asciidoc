= Uniqueness

While pattern matching, Neo4j makes sure to not include matches where the same graph relationship is found multiple times in a single pattern.
In most use cases, this is a sensible thing to do.

Example: looking for a user's friends of friends should not return said user.

Let's create a few nodes and relationships:

//setup
[source,cypher]
----
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
----

[source,querytest]
----
Nodes created: 3
Relationships created: 2
Properties set: 3
----

Which gives us the following graph:

//graph

//console

Now let's look for friends of friends of Adam:

[source,cypher]
----
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend.name AS fofName
----

[source,querytest]
----
David
1 row
----

//table

In this query, Cypher makes sure to not return matches where the pattern relationships `r1` and `r2` point to the same graph relationship.

This is however not always desired.
If the query should return the user, it is possible to spread the matching over multiple `MATCH` clauses, like so:

[source,cypher]
----
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend.name AS fofName
----

[source,querytest]
----
2 rows
David
Adam
----

//table

Note that while the following query looks similar to the previous one, it is actually equivalent to the one before.

[source,cypher]
----
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend.name AS fofName
----

Here, the `MATCH` clause has a single pattern with two paths, while the previous query has two distinct patterns.


[source,querytest]
----
David
1 row
----

//table



