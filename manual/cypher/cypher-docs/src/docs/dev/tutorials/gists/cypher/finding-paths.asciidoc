= Finding Paths

Our example graph consists of movies with title and year and actors with a name.
Actors have `ACTS_IN` relationships to movies, which represents the role they played.
This relationship also has a role attribute.

We queried and updated the data so far, now let's _find interesting constellations, a.k.a. paths_.

[source,cypher]
----
CREATE (matrix1:Movie {title: 'The Matrix', year: '1999-03-31'})
CREATE (matrix2:Movie {title: 'The Matrix Reloaded', year: '2003-05-07'})
CREATE (matrix3:Movie {title: 'The Matrix Revolutions', year: '2003-10-27'})
CREATE (keanu:Actor {name: 'Keanu Reeves'})
CREATE (laurence:Actor {name: 'Laurence Fishburne'})
CREATE (carrieanne:Actor {name: 'Carrie-Anne Moss'})
CREATE (keanu)-[:ACTS_IN {role: 'Neo'}]->(matrix1)
CREATE (keanu)-[:ACTS_IN {role: 'Neo'}]->(matrix2)
CREATE (keanu)-[:ACTS_IN {role: 'Neo'}]->(matrix3)
CREATE (laurence)-[:ACTS_IN {role: 'Morpheus'}]->(matrix1)
CREATE (laurence)-[:ACTS_IN {role: 'Morpheus'}]->(matrix2)
CREATE (laurence)-[:ACTS_IN {role: 'Morpheus'}]->(matrix3)
CREATE (carrieanne)-[:ACTS_IN {role: 'Trinity'}]->(matrix1)
CREATE (carrieanne)-[:ACTS_IN {role: 'Trinity'}]->(matrix2)
CREATE (carrieanne)-[:ACTS_IN {role: 'Trinity'}]->(matrix3)
----

//console

All other movies that actors in ``The Matrix'' acted in ordered by occurrence:

[source,cypher]
----
MATCH (:Movie {title: 'The Matrix'})<-[:ACTS_IN]-(actor)-[:ACTS_IN]->(movie)
RETURN movie.title, count(*)
ORDER BY count(*) DESC;
----

[source,querytest]
----
2 rows
----

//table

Let's see who acted in each of these movies:

[source,cypher]
----
MATCH (:Movie {title: 'The Matrix'})<-[:ACTS_IN]-(actor)-[:ACTS_IN]->(movie)
RETURN movie.title, collect(actor.name), count(*) as count
ORDER BY count desc;
----

[source,querytest]
----
2 rows
----

//table

What about co-acting, that is actors that acted together:

[source,cypher]
----
MATCH (:Movie {title: 'The Matrix'})<-[:ACTS_IN]-(actor)-[:ACTS_IN]->(movie)<-[:ACTS_IN]-(colleague)
RETURN actor.name, collect(distinct colleague.name);
----

[source,querytest]
----
3 rows
----

//table

Who of those other actors acted most often with anyone from the matrix cast?

[source,cypher]
----
MATCH (:Movie {title: 'The Matrix'})<-[:ACTS_IN]-(actor)-[:ACTS_IN]->(movie)<-[:ACTS_IN]-(colleague)
RETURN colleague.name, count(*)
ORDER BY count(*) DESC LIMIT 10;
----

//table

Starting with paths, a path is a sequence of nodes and relationships from a start node to an end node.

We know that Trinity loves Neo, but how many paths exist between the two actors?
We'll limit the path length of the pattern as it exhaustively searches the graph otherwise.
This is done by using `*0..5` in the pattern relationship.

[source,cypher]
----
MATCH p = (:Actor {name: 'Keanu Reeves'})-[:ACTS_IN*0..5]-(:Actor {name: 'Carrie-Anne Moss'})
RETURN p, length(p)
LIMIT 10;
----

[source,querytest]
----
9 rows
----

//table

But that's a lot of data, we just want to look at the names and titles of the nodes of the path.

[source,cypher]
----
MATCH p = (:Actor {name: 'Keanu Reeves'})-[:ACTS_IN*0..5]-(:Actor {name: 'Carrie-Anne Moss'})
RETURN extract(n IN nodes(p) |
         coalesce(n.title,n.name)) AS `names and titles`,
       length(p)
ORDER BY length(p)
LIMIT 10;
----

[source,querytest]
----
9 rows
----

//table


