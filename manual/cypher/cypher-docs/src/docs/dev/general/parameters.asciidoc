[[cypher-parameters]]
= Parameters =

Cypher supports querying with parameters.
This means developers don't have to resort to string building to create a query.
In addition to that, it also makes caching of execution plans much easier for Cypher.

Parameters can be used for literals and expressions in the `WHERE` clause, for the index value in the `START` clause, index queries, and finally for node/relationship ids.
Parameters can not be used as for property names, relationship types and labels, since these patterns are part of the query structure that is compiled into a query plan.

Accepted names for parameters are letters and numbers, and any combination of these.

For details on using parameters via the Neo4j REST API, see <<rest-api-transactional>>.
For details on parameters when using the Neo4j embedded Java API, see <<tutorials-cypher-parameters-java>>.

Below follows a comprehensive set of examples of parameter usage.
The parameters are given as JSON here.
Exactly how to submit them depends on the driver in use.

== String literal ==

include::includes/exampleWithStringLiteralAsParameter.asciidoc[]

You can use parameters in this syntax as well:

include::includes/exampleWithShortSyntaxStringLiteralAsParameter.asciidoc[]

== Regular expression ==

include::includes/exampleWithParameterRegularExpression.asciidoc[]


== Case-sensitive string pattern matching  ==

include::includes/exampleWithParameterCSCIStringPatternMatching.asciidoc[]


== Create node with properties ==

include::includes/create_node_from_map.asciidoc[]

== Create multiple nodes with properties ==

include::includes/create_multiple_nodes_from_map.asciidoc[]

== Setting all properties on node ==

Note that this will replace all the current properties.

include::includes/set_properties_on_a_node_from_a_map.asciidoc[]

== SKIP and LIMIT ==

include::includes/exampleWithParameterForSkipLimit.asciidoc[]

== Node id ==

include::includes/exampleWithParameterForNodeId.asciidoc[]

== Multiple node ids ==

include::includes/exampleWithParameterForMultipleNodeIds.asciidoc[]

== Index value (legacy indexes) ==

include::includes/exampleWithParameterForIndexValue.asciidoc[]

== Index query (legacy indexes) ==

include::includes/exampleWithParametersForQuery.asciidoc[]


